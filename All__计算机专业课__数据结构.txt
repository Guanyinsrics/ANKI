#separator:tab
#html:true
Σ 链式存储设计时，结点内的存储单元地址一定连续吗？	《数据结构 - 绪论》	<ol><li>一定连续</li><li>节点内只有指针与一个变量，两个单元地址紧挨，组成一个节点</li></ol>				
Σ 数据对象与数据结构的区别是什么？	《王道 - 第一章 绪论》	<ol><li>数据对象是 具有相同性质 数据元素 的集合。比如年收入壹佰万元以上的家庭</li><li>数据结构是具有 一种或多种关系 数据元素 的集合。强调数据间的交往，比如我每天给马云500元，马云每周给我100元利息，我和他这两个数据元素以及我俩这种马内交易 就构成了数据结构</li></ol>				
Σ 数据、数据对象、数据元素、数据项、组合项的定义以及关系是什么？	《王道 - 第一章 绪论》	"<ol><li><cr><img src=""https://mubu.com/document_image/884bcb7d-0216-4b9f-865a-fd9e92089b3b-11521829.jpg""></li><li>数据，微博数据；数据对象，所有与我同一天出生的人的微博数据；数据项，我的生日；组合项，2001 11 11三个。</li></ol>"				
Σ 数据类型的定义以及分类	《王道 - 第一章 绪论》	<ol><li>数据类型是 值的集合 与 定义在此集合一组操作 的总称</li><li>原子类型，结构类型，抽象数据类型(ADT)</li></ol>				
Σ 抽象数据类型是不是完整的数据结构？为什么？	《王道 - 第一章 绪论》	ADT定义了完整的数据结构，即逻辑结构、存储结构、数据运算，比如栈与队列				
Σ 什么是结构？	《王道 - 第一章 绪论》	数据结构的数据元素之间存在的特定关系，称为结构				
Σ 数据结构三要素分别是什么？	《王道 - 第一章 绪论》	逻辑结构，存储结构，数据的运算				
Σ 算法的设计依赖数据结构中的哪个要素？	《王道 - 第一章 绪论》	逻辑结构				
Σ 算法的实现依赖数据结构中的哪个要素？	《王道 - 第一章 绪论》	存储结构				
"Σ <cr><img src=""https://mubu.com/document_image/15f8f280-26c3-46f2-971c-b2866866304f-11521829.jpg"" />"	《王道 - 第一章 绪论》	"<cr><img src=""https://mubu.com/document_image/5418813b-c126-495b-8c1a-c74470bbae64-11521829.jpg"">"				
Σ 数据的存储结构包含哪些？并简述	《王道 - 第一章 绪论》	<ol><li>顺序存储，逻辑相邻的元素，物理位置也相邻</li><li>链式存储，只要求逻辑相邻，借助指针实现</li><li>索引存储，建立索引表</li><li>散列存储(Hash存储)，直接计算存储地址</li></ol>				
Σ 数据运算的定义是针对？运算的实现是针对？	《王道 - 第一章 绪论》	逻辑结构，存储结构				
Σ 算法的定义	《王道 - 第一章 绪论》	算法是对特定问题的求解步骤				
Σ 算法的五个特性	《王道 - 第一章 绪论》	<ol><li>有穷性（算法应在有穷步结束，且每一步应在有穷时间完成）</li><li>确定性（相同输入得到确定的相同输出）</li><li>可行性（算法操作可以有限次实现）</li><li>输入</li><li>输出</li></ol>				
Σ 好算法的四个目标	《王道 - 第一章 绪论》	<ol><li>正确性：正确求解问题</li><li>可读性</li><li>健壮性：可以适当对非法数据处理</li><li>高效率与低存储量要求</li></ol>				
Σ 时间复杂度的定义	《王道 - 第一章 绪论》	定性描述算法时间的函数				
Σ \(T(n)=O(f(n))\)中T(n)代表什么意思	《王道 - 第一章 绪论》	所有语句频度（被重复执行的次数）之和				
Σ \(T(n)=O(f(n))\)O代表什么意思	《王道 - 第一章 绪论》	T（n）的数量级				
Σ 时间复杂度分析规则，不同数量级时间复杂度函数的加法规则与乘法规则	《王道 - 第一章 绪论》	加法取最大，乘法取乘积				
Σ 我们一般考虑的时间复杂度是最好/平均/最坏情况下的时间复杂度？	《王道 - 第一章 绪论》	最坏				
Σ 一般程序 空间复杂度分析	《王道 - 第一章 绪论》	有无递归？有无多维数组？				
"Σ 1判断空间复杂度S(n)=O(?)<cr><img src=""https://mubu.com/document_image/0c5d6a51-d7bb-47c3-82a3-91cdeca62977-11521829.jpg"" />"	《王道 - 第一章 绪论》	\(S(n)=O(n)\)				
"Σ 2判断空间复杂度S(n)=O(?)<cr><img src=""https://mubu.com/document_image/643b0350-d40b-426a-a1cd-75589365fb36-11521829.jpg"" />"	《王道 - 第一章 绪论》	\(S(n)=O(n^{2})\)				
Σ 什么是算法原地工作	《王道 - 第一章 绪论》	所需辅助空间为常量，不申请额外的空间，即O(1)				
Σ 第一章 绪论	《王道 - 第一章 绪论》	"<ol><li>数据对象与数据结构的区别是什么？</li><li>数据、数据对象、数据元素、数据项、组合项的定义以及关系是什么？</li><li>数据类型的定义以及分类</li><li>抽象数据类型是不是完整的数据结构？为什么？</li><li>什么是结构？</li><li>数据结构三要素分别是什么？</li><li>算法的设计依赖数据结构中的哪个要素？</li><li>算法的实现依赖数据结构中的哪个要素？</li><li><cr><img src=""https://mubu.com/document_image/15f8f280-26c3-46f2-971c-b2866866304f-11521829.jpg""></li><li>数据的存储结构包含哪些？并简述</li><li>数据运算的定义是针对？运算的实现是针对？</li><li>算法的定义</li><li>算法的五个特性</li><li>好算法的四个目标</li><li>时间复杂度的定义</li><li>\(T(n)=O(f(n))\) ä¸­T(n)çå«ä¹</li><li>\(T(n)=O(f(n))\)ä¸­Oçå«ä¹</li><li>时间复杂度分析规则，不同数量级时间复杂度函数的加法规则与乘法规则</li><li>我们一般考虑的时间复杂度是最好/平均/最坏情况下的时间复杂度？</li><li>一般程序 空间复杂度分析</li><li>1判断空间复杂度S(n)=O(?)<cr><img src=""https://mubu.com/document_image/0c5d6a51-d7bb-47c3-82a3-91cdeca62977-11521829.jpg""></li><li>2判断空间复杂度S(n)=O(?)<cr><img src=""https://mubu.com/document_image/643b0350-d40b-426a-a1cd-75589365fb36-11521829.jpg""></li><li>什么是算法原地工作</li></ol>"				
Σ  线性表的定义	《王道 - 第二章线性表·顺序表》	具有 相同数据类型 的 n个数据元素 的 有限 序列				
Σ 线性表的逻辑特性	《王道 - 第二章线性表·顺序表》	<ol><li>除了第一个元素外，每个元素有且仅有一个直接前驱</li><li>除了最后一个元素外，每个元素有且仅有一个直接后驱</li></ol>				
Σ 线性表的五大特点	《王道 - 第二章线性表·顺序表》	"<ol><li>表中元素个数有限 （对应有限）</li><li>表中元素的数据类型相同 （对应相同数据类型）</li><li>表中元素都是数据元素，都是单个元素</li><li>表中元素具有<span class=""bold"">逻辑</span>上的顺序性（对应序列）</li><li>表中元素具有抽象性，即仅讨论元素间逻辑关系</li></ol>"				
Σ 线性表与顺序表、链表的区别	《王道 - 第二章线性表·顺序表》	<ol><li>线性表是一种逻辑结构，代表元素间一对一相邻的关系</li><li>顺序表和链表是存储结构</li></ol>				
Σ 创销增删值查 位查 分别的指令操作	《王道 - 第二章线性表·顺序表》	"<cr><img src=""https://mubu.com/document_image/ef0f5dd5-3953-4c8a-9cfc-1200e71680b0-11521829.jpg"">"				
Σ 判空 判长 打印输出 分别的指令操作	《王道 - 第二章线性表·顺序表》	"<cr><img src=""https://mubu.com/document_image/3aa9bb8f-4cb3-4f2a-a0d3-a2814b800d18-11521829.jpg"">"				
Σ 数据结果基本操作想对实际的目标进行更改，应该怎么办？	《王道 - 第二章线性表·顺序表》	&amp;				
Σ 线性表的存储结构	《王道 - 第二章线性表·顺序表》	<ol><li>顺序表</li><li>链表</li></ol>				
Σ 顺序表的静态容量分配是通过什么实现的？	《王道 - 第二章线性表·顺序表》	静态数组				
Σ 顺序表的动态分配是通过什么实现的？语句是什么？	《王道 - 第二章线性表·顺序表》	"<ol><li>动态分配，即利用malloc函数与free函数</li><li><span>动态分配的语句是：L.data = (ElemType<span class=""italic"">)malloc(sizeof(ElemType)</span>InitSize)</span></li><li><cr><img src=""https://mubu.com/document_image/c77a15c2-f19e-4a85-8656-b38160483519-11521829.jpg""></li></ol>"				
Σ 顺序表的四个特点是什么	《王道 - 第二章线性表·顺序表》	<ol><li>主要特点 随机访问 使查找元素时间复杂度为O(1)</li><li>存储结构上逻辑相邻的元素物理上也相邻   导致插入删除操作等需要移动大量元素，不方便</li><li>储存密度高  也就是相对于链表不需要储存指针</li><li>拓展容量不方便，即使是动态分配也需要消耗至少时间复杂度O(n)</li></ol>				
Σ 顺序表的存取方式是？	《王道 - 第二章线性表·顺序表》	随机存取				
Σ 顺序表基本操作中插入与删除、按值查找、按位查找的时间复杂度	《王道 - 第二章线性表·顺序表》	一般的平均都是O(n)，但按位查找是O（1）				
Σ 写顺序表代码要注意算法的健壮性，比如？	《王道 - 第二章线性表·顺序表》	注意判断i的合法性				
Σ 顺序表中自定义的结构体，能否直接用==判断是否相等	《王道 - 第二章线性表·顺序表》	<ol><li>实际上必须将各个元素分开依次判断</li><li>但在408初试中，可以直接==判断</li></ol>				
Σ 第二章线性表-顺序表	《王道 - 第二章线性表·顺序表》	<ol><li> 线性表的定义</li><li>线性表的逻辑特性</li><li>线性表的五大特点</li><li>线性表与顺序表、链表的区别</li><li>创销增删改查 分别的指令操作</li><li>判空 判长 打印输出 分别的指令操作</li><li>数据结果基本操作想对实际的目标进行更改，应该怎么办？</li><li>线性表的存储结构</li><li>顺序表的静态容量分配是通过什么实现的？</li><li>顺序表的动态分配是通过什么实现的？语句是什么？</li><li>顺序表的四个特点是什么</li><li>顺序表的存取方式是？</li><li>顺序表基本操作中插入与删除、按值查找、按位查找的时间复杂度</li><li>写顺序表代码要注意算法的健壮性，比如？</li><li>顺序表中自定义的结构体，能否直接用==判断是否相等</li></ol>				
Σ 单链表相对于顺序表的优缺点	《王道 - 第二章线性表·单链表》	<ol><li>单链表不要去逻辑相邻的元素，存储空间也相邻，省空间</li><li>插入和删除元素只需要修改链表的指针，简单快捷</li><li>缺点在于失去了顺序表随机存取的优点</li></ol>				
Σ 单链表的两种实现方式，以及空表判断方式	《王道 - 第二章线性表·单链表》	<ol><li>不带头结点，空表判断是L==NULL</li><li>带头结点，空表判断：L-&gt;next==NULL </li><li>一是因为第一个数据结点位置被存放在头结点的指针域中，链表第一个位置的操作与其他的操作一致，无需特殊处理</li><li>二是因为无论链表是否为空，头指针都是指向头结点的非空指针，可以统一处理空表与非空表</li></ol>				
Σ 为什么带头结点的单链表最好？	《王道 - 第二章线性表·单链表》	<ol><li>第一个数据结点位置储存在头结点指针域中。使链表首位操作与其他位置一致</li><li>链表是否为空不影响头指针指向，使空表与非空表处理一致</li></ol>				
Σ 单链表结构的定义代码	《王道 - 第二章线性表·单链表》	"<cr><img src=""https://mubu.com/document_image/72a4d9a8-2369-46f6-9ac7-39466b5ad9e9-11521829.jpg"" />"				
Σ 单链表的LinkList 与LNode*等价吗	《王道 - 第二章线性表·单链表》	<ol><li>等价</li><li>相当于typedef struct LNode LNode</li><li>typedef struct LNode *LinkList</li></ol>				
设指针为p 则p与p-&gt;next 的含义是什么？	p是指向的结点的地址，p-&gt;next是指向的结点中指针指向的地址					
Σ 什么是双链表？	《王道 - 线性表·双链表》	双链表除了首尾结点外，每一个结点都有两个指针，prior与next指向前后结点				
Σ 双链表的优点是什么？	《王道 - 线性表·双链表》	<ol><li>相比于单链表，给定结点插入删除时间复杂度为O(1)</li><li>其实也不算是啦......</li></ol>				
Σ 线性表-双链表	《王道 - 线性表·双链表》	<ol><li>什么是双链表？</li><li>双链表的优点是什么？</li><li>双链表插入中传入的参数是哪些？</li><li>双链表插入中，第一步需要干什么？</li><li>双链表插入中，第二步要干什么？</li><li>双链表插入结点到某结点后的代码实现</li><li>双链表初始化如何初始化？</li><li>双链表初始化的代码实现</li><li>双链表删除节点的后继结点要干什么？</li><li>双链表删除某一结点的后继结点的代码实现</li><li>双链表毁灭时第一步干什么？</li><li>双链表毁灭时第二步干什么？</li><li>双链表毁灭的代码实现</li></ol>				
Σ 有什么办法可以简单实现单链表的逆置？	《王道 - 第二章线性表·单链表》	头插法可以实现				
Σ typedef如何直接定义struct的结构体	《数据结构 - 绪论》	<ol><li>typedef struct{} 别名</li><li>相当于struct{}后，typedef为这个新结构体取了别名</li></ol>				
Σ malloc free函数的头文件是什么	《数据结构 - 绪论》	stdlib.h				
Σ 静态链表与单链表的区别	《王道 - 静态链表》	静态链表没有使用指针，使用数组方式实现链表				
Σ 静态链表的基本构成原理	《王道 - 静态链表》	"<ol><li><cr><img src=""https://mubu.com/document_image/73148398-3106-4156-a382-12429ad864a6-11521829.jpg""></li><li>分配一整片连续内存空间，结点由本身的数据与下一个结点的游标（数组下标）构成</li></ol>"				
Σ 静态链表的优点与缺点	《王道 - 静态链表》	<ol><li>优点：增删不需要移动大量元素</li><li>缺点：不能随机存取、容量固定、查找只能从头结点依次往后</li></ol>				
Σ 静态链表的适用场景	《王道 - 静态链表》	适用于不支持指针的语言与元素量不变的场景				
Σ 位序与数组下标的区别	《王道 - 静态链表》	位序是逻辑顺序，数组下标是物理上的相对位置				
Σ 静态链表寻址的基本原理	《王道 - 静态链表》	头结点地址+当前节点储存的sizeof(SLinkList)*下个游标				
Σ 静态链表中每个结点的指针指明的内容与游标指明的内容的区别	《王道 - 静态链表》	指针指明地址，游标指明下一个结点游标				
Σ 静态链表插入位序为i的结点的思路	《王道 - 静态链表》	<ol><li>找到一个空节点，存入元素</li><li>从头结点出发寻址位序为i-1的结点</li><li>修改新节点next</li><li>修改i-1号结点的next</li></ol>				
Σ 静态链表判断为空的方法	《王道 - 静态链表》	<ol><li>预先设置分配的数组默认值为-2之类的数字</li><li>防止脏数据干扰</li></ol>				
Σ 静态链表	《王道 - 静态链表》	<ol><li>静态链表与单链表的区别</li><li>静态链表查找/增加/删除元素的时间复杂度</li><li>静态链表的基本构成原理</li><li>静态链表的优点与缺点</li><li>静态链表的适用场景</li><li>位序与数组下标的区别</li><li>静态链表寻址的基本原理</li><li>指针指明的内容与游标指明的内容的区别</li><li>静态链表插入位序为i的结点的思路</li><li>静态链表判断为空的方法</li></ol>				
Σ 循环链表相比于链表的特点是什么？	《王道 - 循环单/双链表》	<ol><li>尾指针next指向头指针</li><li>头指针prior指向尾指针</li></ol>				
Σ 如果常常利用表头表尾元素，可以用什么类型链表？指针需要如何预置？	《王道 - 循环单/双链表》	<ol><li>循环链表</li><li>让指针指向表尾元素</li></ol>				
Σ 循环单与双链表判断空表的方式？	《王道 - 循环单/双链表》	<ol><li>头指针指向头指针</li><li>头next指针指向头指针，头prior指针也指向头指针</li></ol>				
Σ 顺序表销毁思路？	《王道 - 链表与顺序表的比较》	<ol><li>length=0</li><li>静态分配不需要手动回收</li><li>动态分配需要free(L.data)</li></ol>				
Σ 链表的销毁思路	《王道 - 链表与顺序表的比较》	每个元素依次遍历free				
Σ 新增/删元素时，链表与顺序表的时间复杂度是多少？	《王道 - 链表与顺序表的比较》	<ol><li>都是O（N）</li><li>但是 双链表 或者 单链表 中 指定结点 前后结点 的删除增加，只需要O(1)</li></ol>				
Σ 新增元素时，链表与顺序表的时间复杂度主要消耗在哪个步骤？哪个更好？为什么？	《王道 - 链表与顺序表的比较》	<ol><li>顺序表开销来自移动元素</li><li>链表的开销来自查找元素</li><li>如果数据元素很大，顺序表的元素移动的代价很大，因此链表更好</li></ol>				
Σ 查找元素时，链表与顺序表的时间复杂度是多少？	《王道 - 链表与顺序表的比较》	<ol><li>顺序表按位为O(1)  按值为O(n) 但可以用查找法缩短到O(log2 n)</li><li>链表为O(n)</li></ol>				
Σ 如何选择使用链表与顺序表	《王道 - 链表与顺序表的比较》	<ol><li>表长难估计，需要增删元素可用链表</li><li>如果数据固定可预估，需要维护搜索查询，顺序表效率更高</li></ol>				
Σ 链表与顺序表的比较	《王道 - 链表与顺序表的比较》	<ol><li>顺序表销毁思路？</li><li>链表的销毁思路</li><li>新增/删元素时，链表与顺序表的时间复杂度是多少？</li><li>新增元素时，链表与顺序表的时间复杂度主要消耗在哪个步骤？哪个更好？为什么？</li><li>查找元素时，链表与顺序表的时间复杂度是多少？</li><li>如何选择使用链表与顺序表</li></ol>				
Σ 静态链表查找/增加/删除元素的时间复杂度	《王道 - 静态链表》	<ol><li>固定O(n)</li><li>静态链表也是链表！实际没啥子区别！</li></ol>				
Σ 随机存取与顺序存取的区别	《王道 - 第二章线性表·单链表》	<ol><li>随机存取可以通过下标直接访问，与存储位置无关,时间复杂度永远为O(1)</li><li>非随机存取也叫顺序存取,不能通过下标访问,在存取第N个数据时,必须先访问前(N-1)个数据 ,例如链表</li></ol>				
Σ 什么是栈？	《王道 - 栈》	<ol><li>栈是只允许 在一端 进行 插入/删除操作 的线性表</li><li>逻辑结构本质还是线性表的一种</li></ol>				
Σ 栈有哪些参数？	《王道 - 栈》	<ol><li>栈顶TOP 允许插入删除的一端</li><li>栈底Bottom 固定的 不允许插入删除的一端</li></ol>				
Σ 栈的操作特性是什么？	《王道 - 栈》	<ol><li>后进先出（Last in First out）</li><li>LIFO</li></ol>				
Σ n个不同元素进栈，出栈元素不同排列数为？	《王道 - 栈》	"卡特兰数<cr><img src=""https://mubu.com/document_image/45dffe6c-e7b4-4768-8588-2480d73ff541-11521829.jpg"">"				
Σ 栈的基本操作名称	《王道 - 栈》	"<cr><img src=""https://mubu.com/document_image/402d6f81-6adb-461f-b7b8-0e662d7193e5-11521829.jpg"">"				
Σ 顺序栈增删改查的时间复杂度是多少？	《王道 - 栈》	O(1)				
Σ 栈	《王道 - 栈》	<ol><li>什么是栈？</li><li>栈有哪些参数？</li><li>栈的操作特性是什么？</li><li>n个不同元素进栈，出栈元素不同排列数为？</li><li>栈的基本操作名称</li><li>顺序栈增删改查的时间复杂度是多少？</li><li>顺序栈的定义代码</li><li>顺序栈的结构体中，top一般初始化为多少？最大值为多少？</li><li>顺序栈的初始化代码</li><li>顺序栈的进栈代码</li><li>顺序栈的出栈代码</li><li>顺序栈读栈顶元素的代码</li><li>顺序栈当初始化时top=0，入栈出栈的判断</li><li>共享栈的初始化与定义代码</li><li>链栈的基本操作代码</li></ol>				
Σ 队列的定义是什么？	《王道 - 数据结构第三章 栈队列数组·队列》	只允许在一端进行插入，在另一端删除的线性表				
Σ 队列的基本参数有哪些？	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>队头</li><li>队尾</li></ol>				
Σ 队列的逻辑特性	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>先进先出</li><li>FIFO</li></ol>				
Σ 队列的基本操作	《王道 - 数据结构第三章 栈队列数组·队列》	"<cr><img src=""https://mubu.com/document_image/dc07ec76-2b39-4029-9a0d-28ed6eb7a61c-11521829.jpg"">"				
Σ 队列数据结构中rear指针指向末尾元素吗？	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>不</li><li>指向末尾元素的下一个位置</li></ol>				
Σ 队列已满的条件是不是rear==MaxSize？那应该是？机理是？	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>不是</li><li>(Q.rear+1)%MaxSize=Q.front</li><li>也就是判断下一个元素即将插入位置的后一个位置是否是队头指针，使10个MaxSize只能储存9个数据</li><li>因为队列存在前面储存空间未满，后方储存空间用尽的情况，所以需要取余操作来高效利用空间</li><li>实现了逻辑上的环状</li></ol>				
Σ 栈队列判空的条件是什么？	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>Q.rear==Q.front</li><li>也就是下一个要插入的位置正好是队头的位置</li><li>对比已满：下一个元素即将插入位置的后一个位置是否是队头指针，使10个MaxSize只能储存9个数据</li><li>发现只有初始阶段或者出队至队列空才会出现这种判空条件合法的状况</li><li>也就是只能队首队尾并挨，不能队尾加太多，导致绕一圈与队首相撞</li></ol>				
Σ 如何计算顺序表队列元素个数	《王道 - 数据结构第三章 栈队列数组·队列》	（rear+MaxSize-front）%MaxSize				
Σ 常用的判断队列已满/已空的两种不浪费空间的手段	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>设置一个size变量 队空为size=0 队满为size=MaxSize</li><li>设置一个tag记录最近进行的是插入还是删除</li><li>基本逻辑是：只有删除才可能导致队空，只有插入时，才能导致队满 删除使tag=0 插入使tag=1</li><li>队满为front==rear &amp;&amp; tag==1  队空为front==rear &amp;&amp; tag=0</li></ol>				
Σ 链队列会队列满吗？	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>一般情况不会队满，除非内存不足</li><li>但是顺序存储的队列会很容易耗尽预分配的空间</li></ol>				
Σ 出队操作和入队操作分别在哪里进行？（队头/队尾）	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>队头</li><li>队尾</li></ol>				
Σ 双端队列的概念	《王道 - 双端队列》	允许从两端插入和删除的线性表				
Σ 栈的abc输入序列，可能输出cab吗？	《王道 - 双端队列》	<ol><li>不可以</li><li>因为如果c是第一个出栈的，那么b一定是第二个</li><li>卡特兰数</li></ol>				
Σ 出现第一个出栈元素后，栈里剩下的相对顺序还会改变吗？	《王道 - 双端队列》	<ol><li>不会改变</li><li>如果第一个出栈的是最后一个进入的，则直接倒序输出</li></ol>				
Σ 双端队列	《王道 - 双端队列》	<ol><li>双端队列的概念</li><li>栈的abc输入序列，可能输出cab吗？</li><li>出现第一个出栈元素后，栈里剩下的相对顺序还会改变吗？</li><li>直接噶空会怎么样？</li></ol>				
Σ 正常情况，为了分辨队列已满与队列为空的后遗症是什么？	《王道 - 数据结构第三章 栈队列数组·队列》	牺牲一个储存单元				
Σ 链队列的front是队首吗？	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>不是，是头结点</li><li>front-&gt;next才是队首</li></ol>				
Σ 括号匹配代码	《王道 - 数据结构第三章 栈队列数组·应用栈》	"<cr><img src=""https://mubu.com/document_image/70b26b30-6c59-45d9-a0c0-bb2a4875b019-11521829.jpg"">"				
Σ 算术表达式由哪三个部分组成？	《王道 - 数据结构第三章 栈队列数组·应用栈》	操作数，运算符，界限符				
Σ a+b-c*d的后缀/前缀表达式的形式	《王道 - 数据结构第三章 栈队列数组·应用栈》	<ol><li>ab+cd*-</li><li>-+ab*cd</li></ol>				
Σ  中缀表达式转换为后缀表达式的思路	《王道 - 数据结构第三章 栈队列数组·应用栈》	<ol><li>确定中缀表达式的运算顺序</li><li>按照运算顺序 左操作数右操作数运算符 这样组合</li></ol>				
Σ 如何保证中缀转后缀的运算结果唯一？	《王道 - 数据结构第三章 栈队列数组·应用栈》	<ol><li>左优先原则，只要左边的运算符能计算，优先算左边的</li><li>但还是X/大于+-</li></ol>				
Σ 后缀表达式计算思路 徒手	《王道 - 数据结构第三章 栈队列数组·应用栈》	从左往右遍历运算符，然后计算运算符与临近左边的两个数字折成一个操作数，直到仅剩一个操作数				
Σ 后缀表达式计算思路 机算	《王道 - 数据结构第三章 栈队列数组·应用栈》	<ol><li>从左往右扫描下一个元素，直到处理完所有元素</li><li>扫描到操作数则压入栈，并重复第一步，否则执行最后一步</li><li>如果扫描到运算符，弹出两个栈顶元素，并执行相应运算，结果压回栈顶</li></ol>				
Σ 中缀转后缀表达式的栈的作用	《王道 - 数据结构第三章 栈队列数组·应用栈》	保存暂时不能确定运算顺序的运算符				
Σ 中缀表达式转后缀表达式的 机算思路	《王道 - 数据结构第三章 栈队列数组·应用栈》	<ol><li>操作数直接加入后缀表达式</li><li>界限符中(直接入栈，)依次弹出运算符加入后缀表达式，直到弹出(为止</li><li>遇到运算符，依次弹出栈中优先级高于等于当前运算符的所有运算符，并加入后缀表达式。直到遇到(或栈空，最后再把当前运算符入栈</li></ol>				
Σ 徒手模拟A+B*(C-D)-E/F的转后缀表达式的过程	《王道 - 数据结构第三章 栈队列数组·应用栈》	ABCD-*+EF/-				
Σ 中缀表达式的计算 机算思路	《王道 - 数据结构第三章 栈队列数组·应用栈》	<ol><li>初始化 操作数栈 运算符栈</li><li>操作数压入操作数栈</li><li>运算符/界限符，则按照中缀转后缀的逻辑压入运算符栈</li><li>每弹出一个运算符，则需要弹出两个操作数运算后压回操作数</li></ol>				
Σ 数据结构第三章 栈队列数组-应用栈	《王道 - 数据结构第三章 栈队列数组·应用栈》	<ol><li>括号匹配代码</li><li>算术表达式由哪三个部分组成？</li><li>a+b-c*d的后缀/前缀表达式的形式</li><li> 中缀表达式转换为后缀表达式的思路</li><li>如何保证中缀转后缀的运算结果唯一？</li><li>后缀表达式计算思路 徒手</li><li>后缀表达式计算思路 机算</li><li>中缀转后缀表达式的栈的作用</li><li>中缀表达式转后缀表达式的 机算思路</li><li>徒手模拟A+B*(C-D)-E/F的转后缀表达式的过程</li><li>中缀表达式的计算 机算思路</li></ol>				
Σ 函数调用的特点是什么？	《王道 - 栈在递归中的应用》	LIFO				
Σ 函数调用的栈中储存了什么数据？	《王道 - 栈在递归中的应用》	<ol><li>调用返回地址（调用语句下一句代码的存放地址）</li><li>实参</li><li>局部变量</li></ol>				
Σ   递归的组成要素	《王道 - 栈在递归中的应用》	<ol><li>递归表达式</li><li>边界条件</li></ol>				
Σ 递归的优缺点	《王道 - 栈在递归中的应用》	<ol><li>缺点：时间效率低，空间效率低可能栈溢出，可能包括重复运算</li><li>优点：思路简单，化整为零</li></ol>				
Σ 栈在递归中的应用	《王道 - 栈在递归中的应用》	<ol><li>函数调用的特点是什么？</li><li>函数调用的栈中储存了什么数据？</li><li>  递归的组成要素</li><li>递归的优缺点</li></ol>				
Σ 多个进程争抢有限的系统资源的策略是什么？	《王道 - 队列的应用》	队列FCFS实现				
Σ 队列的应用	《王道 - 队列的应用》	<ol><li>树的层次遍历过程</li><li>图的广度优先遍历</li><li>多个进程争抢有限的系统资源的策略是什么？</li></ol>				
Σ 一维数组的储存结构特点	《王道 - 特殊矩阵的压缩存储》	<ol><li>随机存取，各数组元素大小相同，物理上连续存放</li><li>务必注意数组下标从哪里开始</li></ol>				
Σ 二维数组的存储结构映射方法	《王道 - 特殊矩阵的压缩存储》	<ol><li>行优先</li><li>列优先</li></ol>				
Σ 假设二维数组行优先，M行N列，则B[i][j]的储存地址计算是什么？	《王道 - 特殊矩阵的压缩存储》	"<span>LOC+(i<span class=""italic"">N+j)</span>sizeof(ElemType)</span>"				
Σ 二维数组有无随机存取特点？	《王道 - 特殊矩阵的压缩存储》	有				
Σ LOC指向什么？	《王道 - 特殊矩阵的压缩存储》	首元素的第一位地址				
Σ 压缩存储是什么？	《王道 - 特殊矩阵的压缩存储》	为多个值相同的元素只分配一个储存空间，对零元素不分储存空间				
Σ 对称矩阵的压缩储存策略是什么？	《王道 - 特殊矩阵的压缩存储》	只储存主对角线+下三角区				
Σ 对于一个n阶对称矩阵，他的压缩存储数组大小应该为多少？	《王道 - 特殊矩阵的压缩存储》	(1+n)*n/2				
Σ 如何实现压缩存储的对称矩阵的使用？	《王道 - 特殊矩阵的压缩存储》	<ol><li>使用映射函数，将矩阵下标转为一维数组下标</li><li>利用对称矩阵性质ai,j =aj,i</li></ol>				
Σ 三角矩阵的压缩存储策略？	《王道 - 特殊矩阵的压缩存储》	"<ol><li>有数据的三角区压缩存储策略同对称矩阵</li><li>一维数组的最后一个位置储存另外半个三角区的相同元素值常量C</li><li><cr><img src=""https://mubu.com/document_image/96c4e295-1ac2-4224-b1dc-5a1cfa1fe7f8-11521829.jpg""></li></ol>"				
Σ 三对角矩阵（带状矩阵）的特点	《王道 - 特殊矩阵的压缩存储》	"<ol><li>主对角线以及其上下左右的元素可以不为零</li><li>其他元素都是零</li><li><cr><img src=""https://mubu.com/document_image/e2751763-a8fb-4f0f-a5f4-e347ac85ab70-11521829.jpg""></li></ol>"				
Σ 如何把三对角矩阵下标映射为一维数组下标	《王道 - 特殊矩阵的压缩存储》	"<span style=""color: rgb(29, 29, 31); background-color: rgb(255, 255, 255);"">数组下标是0开始，aij是k=2i+j-3，1开始为2i+j-2，i是行号</span>"				
Σ 如何把一维数组矩阵下标映射为三对角矩阵下标	《王道 - 特殊矩阵的压缩存储》	i=[(k+2)/3]也就是向上取整				
Σ 稀疏矩阵是什么？	《王道 - 特殊矩阵的压缩存储》	非零元素远远少于矩阵元素的个数				
Σ 稀疏矩阵的 顺序存储 压缩存储策略	《王道 - 特殊矩阵的压缩存储》	<ol><li>只储存非零元素</li><li>顺序存储一个struct三元组(行，列，值)</li><li>然后定义一个struct类型的一维数组，从而进行储存</li></ol>				
Σ 稀疏矩阵的 顺序存储 压缩存储策略的缺点	《王道 - 特殊矩阵的压缩存储》	失去随机存储的特性，找特定值需要依次扫描				
Σ 特殊矩阵的压缩存储	《王道 - 特殊矩阵的压缩存储》	<ol><li>一维数组的储存结构特点</li><li>二维数组的存储结构映射方法</li><li>假设二维数组行优先，M行N列，则B[i][j]的储存地址计算是什么？</li><li>二维数组有无随机存取特点？</li><li>LOC指向什么？</li><li>压缩存储是什么？</li><li>对称矩阵的压缩储存策略是什么？</li><li>对于一个n阶对称矩阵，他的压缩存储数组大小应该为多少？</li><li>如何实现压缩存储的对称矩阵的使用？</li><li>三角矩阵的压缩存储策略？</li><li>三对角矩阵（带状矩阵）的特点</li><li>如何把三对角矩阵下标映射为一维数组下标</li><li>如何把一维数组矩阵下标映射为三对角矩阵下标</li><li>稀疏矩阵是什么？</li><li>稀疏矩阵的 顺序存储 压缩存储策略</li><li>稀疏矩阵的 顺序存储 压缩存储策略的缺点</li><li>稀疏矩阵的 十字链表法 压缩存储策略</li></ol>				
Σ 循环单/双链表	《王道 - 循环单/双链表》	<ol><li>循环链表相比于链表的特点是什么？</li><li>如果常常利用表头表尾元素，可以用什么类型链表？指针需要如何预置？</li><li>循环单与双链表判断空表的方式？</li></ol>				
Σ 顺序栈的结构体中，top一般初始化为多少？最大值为多少？	《王道 - 栈》	<ol><li>-1</li><li>MaxSize-1 为满，也就是MaxSize个</li></ol>				
Σ 队列初始化时，要做什么？	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>队头队尾指针头指向0，也就是第一个位置</li><li>此时是唯一的rear=front相等，判空</li></ol>				
Σ 链队列初始化的结构什么样？	《王道 - 数据结构第三章 栈队列数组·队列》	两个初始化的结构，一个是正常的链表结点，一个是指向链表结点的两个指针				
Σ 如何初始化带头结点的链队列？第一步是什么？	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>front与rear相等且分配一个头结点</li><li>让这个头结点的next指向NULL</li></ol>				
Σ 链队列与顺序队列判空的条件比较	《王道 - 数据结构第三章 栈队列数组·队列》	相同，都是front=rear				
Σ 如何初始化 不带头结点 的链队列？第一步是什么？	《王道 - 数据结构第三章 栈队列数组·队列》	将两个指针都指向NULL，与单链表一致				
Σ 如何判空 不带头结点 的链队列？	《王道 - 数据结构第三章 栈队列数组·队列》	队头指针为NULL				
Σ 数据结构第三章 栈队列数组-队列	《王道 - 数据结构第三章 栈队列数组·队列》	<ol><li>队列的定义是什么？</li><li>队列的基本参数有哪些？</li><li>队列的逻辑特性</li><li>队列的基本操作</li><li>队列初始化时，要做什么？</li><li>队列数据结构的实现代码</li><li>队列数据结构中rear指针指向末尾元素吗？</li><li>队列已满的条件是不是rear==MaxSize？那应该是？机理是？</li><li>队列判空的条件是什么？</li><li>正常情况，为了分辨队列已满与队列为空的后遗症是什么？</li><li>队列入队的代码实现</li><li>队列出队的代码实现</li><li>队列获取队头元素值的代码实现</li><li>如何计算队列元素个数</li><li>常用的判断队列已满/已空的两种不浪费空间的手段</li><li>rear指针指队尾元素时，入队操作与之前的区别是什么？</li><li>链队列初始化的结构什么样？</li><li>如何初始化带头结点的链队列？第一步是什么？</li><li>链队列与顺序队列判空的条件比较</li><li>（带头结点)链队列的初始化与结构代码</li><li>如何初始化 不带头结点 的链队列？第一步是什么？</li><li>如何判空 不带头结点 的链队列？</li><li>（不带头结点)链队列的初始化与结构代码</li><li>（带头结点）链队列的入队代码</li><li>（不带头结点）链队列的入队是尾插法还是头插法？</li><li>（不带头结点）链队列的入队第一步是什么？</li><li>（不带头结点）链队列的入队第二步是什么？</li><li>（不带头结点）链队列的入队代码</li><li>（带头结点）链队列的出队第一步</li><li>（带头结点）链队列的出队第二步</li><li>（带头结点）链队列的出队代码</li><li>（不带头结点）链队列的出队第一步</li><li>（不带头结点）链队列的出队第二步</li><li>（不带头结点）链队列的出队代码</li><li>链队列会队列满吗？</li><li>出队操作和入队操作分别在哪里进行？（队头/队尾）</li><li>链队列的front是队首吗？</li></ol>				
Σ 树的构成	《树的定义、基本性质 - 树的定义》	"<ol><li>根节点</li><li>边</li><li>分支节点：有后继的结点</li><li>叶子结点：没有后继的结点</li><li><cr><img src=""https://mubu.com/document_image/e0ab051d-1705-4b0e-b972-549027ced449-11521829.jpg""></li></ol>"				
Σ 按结点数分，树有哪些？	《树的定义、基本性质 - 树的定义》	<ol><li>空树</li><li>非空树</li></ol>				
Σ 树的逻辑特点是什么？	《树的定义、基本性质 - 树的定义》	除了根结点外，任何结点有且仅有一个前驱				
Σ 结点之间的关系有哪些？	《树的定义、基本性质 - 树的定义》	<ol><li>祖先结点</li><li>子孙结点</li><li>（双亲结点）父结点</li><li>孩子结点</li><li>兄弟结点</li><li>堂兄弟结点</li></ol>				
Σ 结点间的路径如何表示？长度如何表示？	《树的定义、基本性质 - 树的定义》	<ol><li>从上往下的边</li><li>经过几条边</li></ol>				
Σ 结点的属性中，结点的度是什么？与结点数的关系是什么？	《树的定义、基本性质 - 树的定义》	<ol><li>结点有几个孩子(分支)</li><li>结点数=所有结点总度数之和+1</li></ol>				
Σ 结点的属性中，树的度是什么？	《树的定义、基本性质 - 树的定义》	（包括根结点）所有结点中度的最大值				
Σ 有序树与无序树的区别是什么？	《树的定义、基本性质 - 树的定义》	树中结点的各子树，从左到右有无次序，以及可否互换				
Σ 什么是森林	《树的定义、基本性质 - 树的定义》	<ol><li>m棵互不相交的树的集合</li><li>m可为0，此时为空森林</li></ol>				
Σ 森林与树的区别是什么？	《树的定义、基本性质 - 树的定义》	有无共同的根结点				
Σ 树的定义	《树的定义、基本性质 - 树的定义》	<ol><li>树的构成</li><li>按结点数分，树有哪些？</li><li>树的逻辑特点是什么？</li><li>结点之间的关系有哪些？</li><li>结点间的路径如何表示？长度如何表示？</li><li>什么是结点的层次(深度)？</li><li>什么是结点的高度？</li><li>什么是树的高度（深度）</li><li>结点的属性中，结点的度是什么？与结点数的关系是什么？</li><li>结点的属性中，树的度是什么？</li><li>有序树与无序树的区别是什么？</li><li>什么是森林</li><li>森林与树的区别是什么？</li></ol>				
Σ （重点）树的度为m 与 m叉树 的区别？	《树的定义、基本性质 - 常见辨析与计算》	"<ol><li><span>共同点：任意结点的度&lt;=m</span></li><li><span>不同点1：度为m的树，至少有一个结点为m，而m叉树允许所有结点的度<m< span=""""></m<></span></li><li>不同点2：树的度为m，该树一定是非空树，且最少有m+1个结点。而m叉树可以为空树</li></ol>"				
Σ 度为m的树 第i层数至多多少个结点？m叉树呢？	《树的定义、基本性质 - 常见辨析与计算》	<ol><li>度为m的树第i层至多有 m^(i-1) 个结点</li><li>m叉树与度为m的树相同</li></ol>				
Σ 高度为h的 m叉树 至 多 有多少结点？	《树的定义、基本性质 - 常见辨析与计算》	（m^h - 1）/m-1个结点				
Σ （重点）高度为h的 m叉树 至 少 有多少结点？	《树的定义、基本性质 - 常见辨析与计算》	h个				
Σ （重点）高度为h的 度为m的树 至 少 有多少结点？	《树的定义、基本性质 - 常见辨析与计算》	h+m-1				
Σ 具有n个结点的m叉树的最小高度为多少？	《树的定义、基本性质 - 常见辨析与计算》	"<cr><img src=""https://mubu.com/document_image/b36ca817-26db-4eb2-ac85-fc99f9c48efd-11521829.jpg"">"				
Σ 常见辨析与计算	《树的定义、基本性质 - 常见辨析与计算》	"<ol><li>（重点）树的度为m 与 m叉树 的区别？</li><li>度为m的树 第i层数至多多少个结点？m叉树呢？</li><li>高度为h的 m叉树 至 多 有多少结点？</li><li>（重点）高度为h的 m叉树 至 少 有多少结点？</li><li>（重点）高度为h的 度为m的树 至 少 有多少结点？</li><li>具有n个结点的m叉树的最小高度为多少？</li><li><cr><img src=""https://mubu.com/document_image/04347eb9-85de-4823-9368-f84904bcebb0-11521829.jpg""></li><li>如何算叶结点数？20个度为4的结点、10个度为3的结点、1个度为2的结点、10个度为1的结点，求叶结点数？</li></ol>"				
稀疏矩阵储存的常用策略是哪两种？	十字链表法、三元组法					
Σ 如何算叶结点数？20个度为4的结点、10个度为3的结点、1个度为2的结点、10个度为1的结点，求叶结点数？	《树的定义、基本性质 - 常见辨析与计算》	<ol><li>因为结点数等于总度数+1,</li><li>20x4+10x3+1x2+10x1=122 这个是总度数，所以总结点数为123</li><li>所以123-20-10-1-10=82就是剩下的0度叶结点数</li></ol>				
通常使用什么处理函数与过程调用？	栈					
执行函数时，局部变量一般使用什么储存？	栈结构					
Σ 什么是结点的层次(深度)？	《树的定义、基本性质 - 树的定义》	从上往下数				
Σ 什么是结点的高度？	《树的定义、基本性质 - 树的定义》	从下往上数				
Σ 什么是树的高度（深度）	《树的定义、基本性质 - 树的定义》	一共多少层				
Σ 二叉树的特点是什么？	《1 - 二叉树定义与术语》	<ol><li>每个结点至多有两棵子树</li><li>左右子树不能颠倒（有序树）</li></ol>				
Σ 树是由什么定义的数据结构？	《1 - 二叉树定义与术语》	递归				
Σ 二叉树有哪五种状态？	《1 - 二叉树定义与术语》	<ol><li>空二叉树</li><li>只有左子树</li><li>只有右子树</li><li>只有根节点</li><li>左右子树都有</li></ol>				
Σ 特殊二叉树有哪些？	《1 - 二叉树定义与术语》	<ol><li>满二叉树</li><li>完全二叉树</li><li>二叉排序树</li><li>平衡二叉树</li></ol>				
Σ 满二叉树的叶子结点在哪一层？	《1 - 二叉树定义与术语》	只在最后一层				
Σ 满二叉树中度为1的结点是哪一个？有无度为2/0的结点	《1 - 二叉树定义与术语》	<ol><li>没有度为1的结点</li><li>叶子结点度为0，其余度为2</li></ol>				
Σ 设层序从1开始编号，满二叉树（完全二叉树也一样）中序号为i的结点的左孩子，右孩子，父节点的编号分别是多少？	《1 - 二叉树定义与术语》	"<ol><li>2i</li><li>2i+1</li><li>[i/2]向下取整（如果有父节点的话）</li><li>完全二叉树</li><li><cr><img src=""https://mubu.com/document_image/0c0b29b2-9212-4849-9d6e-ba15d7ef33ad-11521829.jpg""></li></ol>"				
Σ 完全二叉树与满二叉树 定义 的区别是什么？包含关系是什么？	《1 - 二叉树定义与术语》	<ol><li>完全二叉树与满二叉树结点编号一一对应</li><li>但是完全二叉树可以把序号最大的几个结点删除</li><li>满二叉树一定是完全二叉树，完全二叉树不一定是满二叉树</li></ol>				
Σ 完全二叉树的叶子结点在哪一层？	《1 - 二叉树定义与术语》	只有最后两层可能有叶子结点				
Σ 完全二叉树中度为1的结点是哪一个？	《1 - 二叉树定义与术语》	<ol><li>最多只有一个度为1的结点</li><li>如果存在，必在倒数第二层</li></ol>				
Σ 如何判断完全二叉树的某一编号的结点是否为分支结点？	《1 - 二叉树定义与术语》	<ol><li><span>i&lt;=[n/2]为分支结点</span></li><li>i&gt;[n/2]为叶子结点&nbsp; 都是下取整</li></ol>				
Σ 完全二叉树某结点如果只有一个孩子，一定是（左/右）孩子？	《1 - 二叉树定义与术语》	左孩子				
Σ 二叉排序树的特点是什么？	《1 - 二叉树定义与术语》	<ol><li>左子树上所有结点的关键字均小于根结点的关键字;</li><li>右子树上所有结点的关键字均大于根结点的关键字。</li><li>左子树和右子树又各是一棵二叉排序树。</li></ol>				
Σ 什么场景使用二叉排序树？	《1 - 二叉树定义与术语》	经常排序与搜索				
Σ 什么平衡二叉树？	《1 - 二叉树定义与术语》	"<ol><li> 平衡二叉树。树上任一结点的左子树和右子树的深度之差不超过1。</li><li><cr><img src=""https://mubu.com/document_image/3487d0bd-41f5-4a42-9337-7d9eefa6d523-11521829.jpg""></li></ol>"				
Σ 平衡二叉树的优点是什么？	《1 - 二叉树定义与术语》	搜索效率更高				
Σ 二叉树定义与术语	《1 - 二叉树定义与术语》	<ol><li>二叉树的特点是什么？</li><li>树是由什么定义的数据结构？</li><li>二叉树有哪五种状态？</li><li>特殊二叉树有哪些？</li><li>满二叉树的叶子结点在哪一层？</li><li>满二叉树中度为1的结点是哪一个？有无度为2/0的结点</li><li>叶子结点度为0，其余度为2的树一定是满二叉树吗？</li><li>设层序从1开始编号，满二叉树（完全二叉树也一样）中序号为i的结点的左孩子，右孩子，父节点的编号分别是多少？</li><li>完全二叉树与满二叉树 定义 的区别是什么？包含关系是什么？</li><li>完全二叉树的叶子结点在哪一层？</li><li>完全二叉树中度为1的结点是哪一个？</li><li>如何判断完全二叉树的某一编号的结点是否为分支结点？</li><li>完全二叉树某结点如果只有一个孩子，一定是（左/右）孩子？</li><li>二叉排序树的特点是什么？</li><li>什么场景使用二叉排序树？</li><li>什么平衡二叉树？</li><li>平衡二叉树的优点是什么？</li></ol>				
Σ 二叉树的叶子结点与二分支结点，数量关系	《1 - 二叉树计算考点》	<ol><li>叶子结点一定比二分支结点多一个</li><li>是从结点数之和与树结点数=总度数+1，推导而来</li></ol>				
Σ 完全二叉树，具有n个结点，则有多高？	《1 - 二叉树计算考点》	"<ol><li><cr><img src=""https://mubu.com/document_image/16484194-4024-445a-8bad-cf7331f6bfb2-11521829.jpg""></li><li>手推<cr><img src=""https://mubu.com/document_image/c60d41f8-a8dc-4eee-8899-425b8fe9a946-11521829.jpg""></li></ol>"				
Σ 完全二叉树，第i个结点，所在层次是多少？	《1 - 二叉树计算考点》	"<cr><img src=""https://mubu.com/document_image/c15af7f6-1a39-46eb-adb4-125314c9d4a0-11521829.jpg"">"				
Σ 只给完全二叉树的结点数，如何推出度为0.1.2的结点个数	《1 - 二叉树计算考点》	"<cr><img src=""https://mubu.com/document_image/0c0dfb51-7cf8-4e02-b3a4-b135fd1abd05-11521829.jpg"">"				
Σ 二叉树计算考点	《1 - 二叉树计算考点》	<ol><li>二叉树的叶子结点与二分支结点，数量关系</li><li>完全二叉树，具有n个结点，则有多高？</li><li>完全二叉树，第i个结点，所在层次是多少？</li><li>只给完全二叉树的结点数，如何推出度为0.1.2的结点个数</li></ol>				
Σ 二叉树结点的顺序存储定义要定义哪些数据？	《1 - 二叉树的存储结构》	<ol><li>结点元素</li><li>结点的bool值 isempty</li></ol>				
Σ 二叉树顺序存储初始化要干什么？	《1 - 二叉树的存储结构》	<ol><li>定义类型为二叉树结点的长度为max的数组t</li><li>然后遍历节点，让每一个结点isempty设置为空</li></ol>				
Σ 如何判断顺序存储的完全二叉树，某个结点是否有左右孩子/是否是叶子.分支结点？	《1 - 二叉树的存储结构》	"<cr><img src=""https://mubu.com/document_image/7fa907c9-80db-47e0-b2c6-6196209b7490-11521829.jpg"">"				
Σ 如何让顺序存储的普通二叉树可以通过结点编号反应逻辑关系？	《1 - 二叉树的存储结构》	"<ol><li>将二叉树的结点编号与完全二叉树对应起来</li><li><cr><img src=""https://mubu.com/document_image/af04a2dc-ac90-48a7-97d7-70c9d3fbdf80-11521829.jpg""></li></ol>"				
Σ 顺序存储的普通二叉树可以通过结点编号反应逻辑关系的缺陷是什么？	《1 - 二叉树的存储结构》	<ol><li>只能判断某个结点的左右孩子与父节点编号</li><li>但不能直接判断某结点是否有左右孩子以及叶子分支结点，只能通过检查isempty判断</li><li>从而致使浪费大量储存空间，最坏情况也得使用2^h  -1个结点</li></ol>				
Σ 顺序存储的二叉树，适合存储什么样的二叉树？	《1 - 二叉树的存储结构》	只适合存储完全二叉树				
Σ 二叉树的链式存储，需要定义哪些元素？	《1 - 二叉树的存储结构》	<ol><li>一个结点data</li><li>两个该结点类型指针 lchild rchild</li><li>其中data需要单独struct定义，因为data值可能为多种类型或者复合类型</li></ol>				
Σ 二叉树如果有n个结点，一共有多少非空指针域？多少空链域？	《1 - 二叉树的存储结构》	<ol><li>一共有2n个指针域</li><li>n-1非空指针域</li><li>n+1空链域</li></ol>				
Σ 二叉树的链式存储，如何初始化？	《1 - 二叉树的存储结构》	<ol><li>定义结点指针，并指向null</li><li>代表定义一个空树</li></ol>				
Σ 二叉树如何寻找指定结点的父节点？如何改进？	《1 - 二叉树的存储结构》	<ol><li>从根遍历</li><li>如果真的需要经常逆向的话，可以定义指向父节点的指针，也叫三叉链表，对应二叉树链式存储的“二叉链表”</li></ol>				
Σ 二叉树的层序遍历思想	《1 - 二叉树的存储结构》	<ol><li>初始化一个辅助队列</li><li>根结点入队</li><li>队列如果非空，则队头结点出队，访问该结点，并将其左右孩子插入队尾</li><li>重复直到队列为空</li></ol>				
Σ 二叉树的存储结构	《1 - 二叉树的存储结构》	<ol><li>二叉树的顺序存储定义要定义哪些数据？</li><li>二叉树顺序存储初始化要干什么？</li><li>如何判断顺序存储的完全二叉树，某个结点是否有左右孩子/是否是叶子.分支结点？</li><li>如何让顺序存储的普通二叉树可以通过结点编号反应逻辑关系？ </li><li>顺序存储的普通二叉树可以通过结点编号反应逻辑关系的缺陷是什么？</li><li>顺序存储的二叉树，适合存储什么样的二叉树？</li><li>二叉树的链式存储，需要定义哪些元素？</li><li>二叉树如果有n个结点，一共有多少非空指针域？多少空链域？</li><li>二叉树的链式存储，如何初始化？</li><li>二叉树的链式存储，如何插入根结点？</li><li>二叉树的链式存储，如何插入新结点？</li><li>二叉树如何寻找指定结点的父节点？如何改进？</li><li>二叉树的层序遍历思想</li><li>二叉树的层序遍历代码</li></ol>				
Σ 叶子结点度为0，其余度为2的树一定是满二叉树吗？最少结点数是？	《1 - 二叉树定义与术语》	不一定，最少结点数是2h-1				
Σ 如何让顺序存储的普通二叉树可以通过结点编号反应逻辑关系？ 	《1 - 二叉树的存储结构》	"<ol><li>将二叉树的结点编号与完全二叉树对应起来</li><li><cr><img src=""https://mubu.com/document_image/af04a2dc-ac90-48a7-97d7-70c9d3fbdf80-11521829.jpg""></li></ol>"				
Σ 二叉树的遍历方式有哪些？	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	<ol><li>先序遍历NLR</li><li>中序遍历LNR</li><li>后序遍历LRN</li></ol>				
Σ 访问与遍历的区别是什么？	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	访问仅仅只是经过，不一定将其加入队列，只有遍历才加入队列				
Σ 最基础的先序遍历代码是什么？	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	"<ol><li>如果二叉树为空，则什么也不做</li><li>二叉树非空：访问根结点、先序遍历左子树！（不是左结点），再先序遍历右子树</li><li><cr><img src=""https://mubu.com/document_image/e66d0ddd-7132-47e7-90c0-c5c4f18d3355-11521829.jpg""></li></ol>"				
"Σ 手推这个二叉树的遍历顺序<cr><img src=""https://mubu.com/document_image/a8769fcf-c09e-44be-9f36-12556f92128d-11521829.jpg"" />"	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	"<ol><li><cr><img src=""https://mubu.com/document_image/4861639e-e2d7-4a74-9b6c-8b897eff69bd-11521829.jpg""></li><li>遍历的时候，要假设每个结点都有左右两个子树，当然可能为空就是了</li></ol>"				
Σ 递归遍历二叉树算法中，每个结点都会被路过、访问几次？不同序都是在第几次路过时被访问？	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	"<ol><li>都会被路过三次</li><li>都会被访问，但都仅被访问一次</li><li>注意，这是算法，与手推不一样！</li><li><cr><img src=""https://mubu.com/document_image/0fddf7e3-b207-424d-a73b-996fe38d567d-11521829.jpg""></li></ol>"				
Σ 递归遍历二叉树算法中，时间复杂度是多少？空间复杂度又是多少？	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	时空复杂度都是O(n)，其中空间复杂度最大在n结点n深度全单支树取得				
Σ 递归遍历二叉树算法中，工作栈的深度与树深是什么关系？	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	栈深等于树深				
Σ 算数分析树三种 先中后 方式遍历会有哪三种不同结果？	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	<ol><li>前缀表达式</li><li>中缀表达式（没有界限符）</li><li>后续表达式</li></ol>				
Σ 给你一种遍历序列（前序、中序、后序、层序）你可以确定他的二叉树形态吗？来动手试试吧！	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	"<ol><li>不行！每一种序列都对应多种形态！</li><li><cr><img src=""https://mubu.com/document_image/afb95b96-00f9-4038-bbdc-ed0476043e5d-11521829.jpg""></li></ol>"				
Σ 给你什么样的遍历序列，可以让你确定一个二叉树形态？	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	前/后/层序遍历序列（选一个）+中序遍历序列（必选）				
"Σ 推子树形态！<cr><img src=""https://mubu.com/document_image/adc98ae8-947b-4a25-90c7-a8c0b4ee009d-11521829.jpg"" />"	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	"<cr><img src=""https://mubu.com/document_image/8c12f06d-566c-4890-ab47-222b2255289f-11521829.jpg"">"				
"Σ 推子树形态x2！<cr><img src=""https://mubu.com/document_image/9478641d-dc28-4799-a958-3929dd30dcb1-11521829.jpg"" />"	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	"<cr><img src=""https://mubu.com/document_image/b6aa9d10-c787-480b-a3e2-ca42b7cb35e5-11521829.jpg"">"				
"Σ 推子树形态x3！<cr><img src=""https://mubu.com/document_image/eb7a7c2e-0189-4d1f-86c0-a57908a215a1-11521829.jpg"" />"	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	"<cr><img src=""https://mubu.com/document_image/e9fb5291-2847-4063-b75e-7b3c99c742ff-11521829.jpg"">"				
Σ 二叉树的遍历	《二叉树的遍历与线索二叉树 - 二叉树的遍历》	"<ol><li>二叉树的遍历方式有哪些？</li><li>访问与遍历的区别是什么？</li><li>最基础的先序遍历代码是什么？</li><li>手推这个二叉树的遍历顺序<cr><img src=""https://mubu.com/document_image/a8769fcf-c09e-44be-9f36-12556f92128d-11521829.jpg""></li><li>递归遍历二叉树算法中，每个结点都会被路过、访问几次？不同序都是在第几次路过时被访问？</li><li>递归遍历二叉树算法中，时间复杂度是多少？空间复杂度又是多少？</li><li>递归遍历二叉树算法中，工作栈的深度与树深是什么关系？</li><li>算数分析树三种 先中后 方式遍历会有哪三种不同结果？</li><li>给你一种遍历序列（前序、中序、后序、层序）你可以确定他的二叉树形态吗？来动手试试吧！</li><li>给你什么样的遍历序列，可以让你确定一个二叉树形态？</li><li>推子树形态！<cr><img src=""https://mubu.com/document_image/adc98ae8-947b-4a25-90c7-a8c0b4ee009d-11521829.jpg""></li><li>推子树形态x2！<cr><img src=""https://mubu.com/document_image/9478641d-dc28-4799-a958-3929dd30dcb1-11521829.jpg""></li><li>推子树形态x3！<cr><img src=""https://mubu.com/document_image/eb7a7c2e-0189-4d1f-86c0-a57908a215a1-11521829.jpg""></li></ol>"				
Σ 传统二叉树的缺点，如何解决？	《二叉树的遍历与线索二叉树 - 线索二叉树》	<ol><li>遍历必须从根开始</li><li>难以直接找指定结点的前驱后继，除非使用pre指针指向上一个结点</li><li>使用线索二叉树</li></ol>				
Σ 线索二叉树相比于二叉树新增了什么？	《二叉树的遍历与线索二叉树 - 线索二叉树》	<ol><li>在n+1个空链域上连接了前驱、后继</li><li>前驱线索：左孩子指针指向遍历序列中的前驱结点，也就是X序前驱</li><li>后继线索，X序后继</li></ol>				
Σ 线索二叉树如何表示某结点的左右指针指向的是孩子，还是仅作为线索？	《二叉树的遍历与线索二叉树 - 线索二叉树》	使用ltag与rtag的int型数据来表示，为1表示线索，0表示孩子				
Σ 二叉树的术语是什么？	《二叉树的遍历与线索二叉树 - 线索二叉树》	二叉链表				
Σ 线索二叉树的术语是什么？	《二叉树的遍历与线索二叉树 - 线索二叉树》	线索链表				
Σ 线索二叉树的种类有哪些？	《二叉树的遍历与线索二叉树 - 线索二叉树》	<ol><li>中序线索二叉树</li><li>先序线索二叉树</li><li>后序线索二叉树</li></ol>				
"Σ 画出线索二叉树<cr><img src=""https://mubu.com/document_image/5fac598e-17c3-412b-ab0e-ffbd81524ff7-11521829.jpg"" />"	《二叉树的遍历与线索二叉树 - 线索二叉树》	"<cr><img src=""https://mubu.com/document_image/2fabc7a6-dd32-4aba-a507-56662638727e-11521829.jpg"">"				
Σ 线索二叉树	《二叉树的遍历与线索二叉树 - 线索二叉树》	"<ol><li>传统二叉树的缺点，如何解决？</li><li>线索二叉树相比于二叉树新增了什么？</li><li>线索二叉树如何表示某结点的左右指针指向的是孩子，还是仅作为线索？</li><li>二叉树的术语是什么？</li><li>线索二叉树的术语是什么？</li><li>线索二叉树的种类有哪些？</li><li>画出线索二叉树<cr><img src=""https://mubu.com/document_image/5fac598e-17c3-412b-ab0e-ffbd81524ff7-11521829.jpg""></li></ol>"				
Σ 二叉树的遍历与线索二叉树	《二叉树的遍历与线索二叉树》	<ol><li>二叉树的遍历</li><li>线索二叉树</li><li>线索二叉树的线索化实现</li></ol>				
Σ 线索二叉树的全局变量pre作用是什么？	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	为了反应当前结点的前驱				
Σ 线索化二叉树时，每次访问结点的代码第一步要做什么？	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	查看左子树是否为空，如果为空则将其左孩子设为pre，并标注ltag为1来指示已经线索化了				
Σ 线索化二叉树时，每次访问结点的代码第二步要做什么？	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	<ol><li>检查是否处于 pre不为空，但pre的右子树为空的情况</li><li>重要：如果是，则将pre的有孩子设置为当前结点，然后将pre的rtag设置为1  </li><li>最后将pre指回当前结点</li></ol>				
Σ 线索化二叉树的主代码的思路是什么？	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	<ol><li>初始化pre为NULL后，对判定为非空的二叉树进行线索化函数</li><li>如果最后一个结点的右孩子为空的情况下，将右孩子的rtag设置为1，代表已经线索化了</li></ol>				
"Σ 为什么王道中序代码中将最后的pre->rchild直接设置为NULL<cr><img src=""https://mubu.com/document_image/94dea6ce-796a-4e15-9acc-b3b20a24c35b-11521829.jpg"" />"	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	<ol><li>因为中序遍历中最后一个pre-&gt;rchild一定不存在</li><li>一旦存在，则还将被继续遍历，而不会离开InThread的这个循环</li></ol>				
Σ 在进行先序遍历线索化时，什么时候会出现爱的魔力转圈圈？如何克服？	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	<ol><li>先序遍历线索化某个没有左子树的结点时，会访问该子树的左结点指向，也就是pre上个结点，也就是上个结点</li><li>当访问回上个结点后，相当于转回去了</li><li>克服方法是判定是否左结点已经被线索化了，如果已经被线索化了就直接访问右子树就OK</li></ol>				
Σ 线索二叉树的线索化实现	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	"<ol><li>线索二叉树结点的定义是什么？</li><li>线索二叉树的全局变量pre作用是什么？</li><li>中序线索化二叉树的代码是什么？</li><li>线索化二叉树时，每次访问结点的代码第一步要做什么？</li><li>线索化二叉树时，每次访问结点的代码第二步要做什么？</li><li>线索化二叉树的主代码是什么？</li><li>线索化二叉树的主代码的思路是什么？</li><li>为什么王道中序代码中将最后的pre-&gt;rchild直接设置为NULL<cr><img src=""https://mubu.com/document_image/94dea6ce-796a-4e15-9acc-b3b20a24c35b-11521829.jpg""></li><li>先序线索化代码与中序线索化代码的区别在哪？</li><li>在中序线索二叉树中找中序后继的思路是什么？</li><li>在中序线索二叉树中中序遍历（非递归），并且找中序后继的代码是什么？（三个函数）</li><li>在中序线索二叉树中中序遍历（非递归），空间复杂度为多少？</li><li>在中序线索二叉树中找中序前驱的思路是什么？</li><li>在中序线索二叉树中中序遍历（非递归），并且找中序后继的代码是什么？（三个函数）</li><li>在先序线索二叉树中找先序后继的思路是什么？</li><li>在先序线索二叉树中找先序前驱的思路是什么？</li><li>如何通过三叉链表的父节点，找到先序线索二叉树前驱的</li></ol>"				
Σ 在中序线索二叉树中找中序后继的思路是什么？	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	<ol><li>如果当前结点的rtag=1，也就是已经被线索化了，则next=p-&gt;rchild</li><li>如果当前结点的rtag=0，也就是当前结点存在右子树，则next为右子树最左下的结点</li></ol>				
Σ 在中序线索二叉树中中序遍历（非递归），空间复杂度为多少？	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	O(1)				
Σ 在中序线索二叉树中找中序前驱的思路是什么？	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	<ol><li>如果当前结点的ltag=1，也就是已经被线索化了，则pre=p-&gt;lchild</li><li>如果当前结点的ltag=0，则pre为左子树中最右下的结点</li></ol>				
Σ 在先序线索二叉树中找先序后继的思路是什么？	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	<ol><li>如果当前结点的rtag=1，也就是已经被线索化了，则下一个就是=p-&gt;rchild</li><li>如果当前结点左右孩子都存在，则后继是左孩子的根结点</li><li>如果当前结点只有右孩子存在，则后继是右孩子的根结点</li></ol>				
Σ 在先序线索二叉树中找先序前驱的思路是什么？	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	<ol><li>因为左右子树都一定是后继不是前驱，所以无法直接寻找</li><li>除非改成三叉链表，找到父节点，进而找到前驱</li></ol>				
Σ 如何在不同的左右根全/左全之类的通过三叉链表的父节点，找到先序线索二叉树前驱的	《二叉树的遍历与线索二叉树 - 线索二叉树的线索化实现》	<ol><li>如果是左右根三全的情况下，该结点为左子树根结点，则父节点直接为前驱结点</li><li>如果是右根双全，节点为右子树,则父节点直接为前驱结点</li><li>如果是左右根三全的情况下，该结点为右子树根结点，则左结点的最右下结点为前驱结点</li><li>如果是总根，则没有前驱</li><li>别问为什么不能在左根双全，那种情况其实和又跟双全一模一样</li></ol>				
Σ 树的双亲表示（顺序存储）代码原理实现（表格）	《树 - 树的存储结构与遍历思想》	"<cr><img src=""https://mubu.com/document_image/c07a4e90-45c9-4a75-9f96-3c0f5ca3cd13-11521829.jpg"">"				
Σ 树的双亲表示（顺序存储）如何表示没有双亲？	《树 - 树的存储结构与遍历思想》	parent=-1				
Σ 树的双亲表示（顺序存储）的优缺点分别是什么？	《树 - 树的存储结构与遍历思想》	<ol><li>优点是查找 指定结点 的双亲很方便</li><li>缺点是会查找指定结点的孩子只能从头遍历</li><li>如果没有采用新结点填充空白区域的方式的话，还会产生大量空数据拖慢遍历速度</li></ol>				
Σ 树的孩子表示法的思路（顺序+链式存储）	《树 - 树的存储结构与遍历思想》	"结点储存在表中，按顺序存储，指针指向第一个孩子对应的链表结点<cr>链表中的结点储存的仅仅是每个结点的顺序存储下标<cr><img src=""https://mubu.com/document_image/6d36347d-a832-4b62-be68-36242580a5ff-11521829.jpg"">"				
Σ 重要！树的孩子兄弟表示法（链式存储）的思路	《树 - 树的存储结构与遍历思想》	<ol><li>左指针指向第一个孩子</li><li>右指针指向第一个右兄弟</li></ol>				
Σ 使用什么表示法转换树与二叉树	《树 - 树的存储结构与遍历思想》	孩子兄弟表示法（链式存储）				
Σ 森林与二叉树转换的本质是什么？	《树 - 树的存储结构与遍历思想》	<ol><li>用二叉链表存储森林</li><li>根结点视为兄弟关系</li><li>用孩子兄弟表示法表示实际的树形态</li></ol>				
"Σ 森林与二叉树转换的思路是什么？手动写一下<cr><img src=""https://mubu.com/document_image/e4b9b883-6253-4089-b3bc-5421bb4ffebe-11521829.jpg"">"	《树 - 树的存储结构与遍历思想》	"左边是孩子，右边是兄弟<cr><img src=""https://mubu.com/document_image/58665a73-f18e-4476-b355-b62a77f0accd-11521829.jpg"">"				
Σ 树是什么定义的数据结构？	《树 - 树的存储结构与遍历思想》	递归				
"Σ 树的先根遍历的思路是什么？<cr><img src=""https://mubu.com/document_image/2ec0f066-4972-4cd8-b949-c3061013d3f1-11521829.jpg"" />"	《树 - 树的存储结构与遍历思想》	"<ol><li>若树非空，先访问根结点</li><li>再依次对每棵子树进行先根遍历</li><li><cr><img src=""https://mubu.com/document_image/ac98e766-81bb-46c9-abcc-79101955965c-11521829.jpg""></li></ol>"				
Σ 树的先根遍历序列与这棵树相对应二叉树的先序序列相同吗	《树 - 树的存储结构与遍历思想》	相同				
"Σ 树的后根遍历的思路是什么？<cr><img src=""https://mubu.com/document_image/7e53cb57-85ac-4587-88fc-ae901e5bee31-11521829.jpg"">"	《树 - 树的存储结构与遍历思想》	"<ol><li>若树非空，先依次对每个子树进行后根遍历</li><li>最后再访问根结点</li><li>这个图是对应的二叉树，不是原本的树<cr><img src=""https://mubu.com/document_image/5b63a238-1ff4-4f16-8aa3-3ef273ab66ff-11521829.jpg""></li></ol>"				
Σ 树的后根遍历序列与这棵树相对应二叉树的中序序列相同吗	《树 - 树的存储结构与遍历思想》	相同				
Σ 树的层次遍历实现的基础数据结构是什么？	《树 - 树的存储结构与遍历思想》	队列				
Σ 树的层次遍历思想是什么？	《树 - 树的存储结构与遍历思想》	广度优先遍历				
Σ 树的先/后根遍历思想是什么？	《树 - 树的存储结构与遍历思想》	深度优先遍历				
Σ 先序遍历森林的效果与先根遍历等同吗？	《树 - 树的存储结构与遍历思想》	等同				
Σ 中序遍历森林的效果与相应二叉树中序遍历等同吗？	《树 - 树的存储结构与遍历思想》	等同				
Σ 树的存储结构与遍历思想	《树 - 树的存储结构与遍历思想》	"<ol><li>树的双亲表示（顺序存储）代码原理实现（表格）</li><li>树的双亲表示（顺序存储）如何表示没有双亲？</li><li>树的双亲表示（顺序存储）定义代码实现</li><li>树的双亲表示（顺序存储）的优缺点分别是什么？</li><li>树的孩子表示法的思路（顺序+链式存储）</li><li>树的孩子表示法的代码实现</li><li>重要！树的孩子兄弟表示法（链式存储）的思路</li><li>使用什么表示法转换树与二叉树</li><li>森林与二叉树转换的本质是什么？</li><li>森林与二叉树转换的思路是什么？手动写一下<cr><img src=""https://mubu.com/document_image/e4b9b883-6253-4089-b3bc-5421bb4ffebe-11521829.jpg""></li><li>树是什么定义的数据结构？</li><li>树的先根遍历的思路是什么？<cr><img src=""https://mubu.com/document_image/2ec0f066-4972-4cd8-b949-c3061013d3f1-11521829.jpg""></li><li>树的先根遍历序列与这棵树相对应的先序序列相同吗</li><li>树的后根遍历的思路是什么？<cr><img src=""https://mubu.com/document_image/7e53cb57-85ac-4587-88fc-ae901e5bee31-11521829.jpg""></li><li>树的后根遍历序列与这棵树相对应的后序序列相同吗</li><li>树的层次遍历实现的基础数据结构是什么？</li><li>树的层次遍历思想是什么？</li><li>树的先/后根遍历思想是什么？</li><li>先序遍历森林的效果与先根遍历等同吗？</li><li>中序遍历森林的效果与后根遍历等同吗？</li></ol>"				
Σ <span>int j=1 for(j<=n)会执行多少次for下的代码？</span>	《数据结构 - 绪论》	n次，n				
Σ return i>j ?  i+1:j+1;什么意思	《数据结构 - 绪论》	i是否大于j，大于则i+1，不大于则j+1				
Σ 结点的权是什么？	《哈夫曼树 - 哈夫曼树》	<ol><li>某种现实意义的数值</li><li>比如传答案的时候，有80个C，那么为了方便传递信息最小化，可以定义一个权为80的结点代表C</li></ol>				
Σ 结点的带权路径长度是什么？	《哈夫曼树 - 哈夫曼树》	WPL.&nbsp; 从树的根到该结点经过的边数与该点权值的乘积				
Σ 树的带权路径长度	《哈夫曼树 - 哈夫曼树》	"<ol><li>所有 叶子结点 的带权路径长度之和</li><li><cr><img src=""https://mubu.com/document_image/1a7276bd-78b6-45bd-96b2-2283e748af95-11521829.jpg""></li></ol>"				
Σ 哈夫曼树的定义	《哈夫曼树 - 哈夫曼树》	<ol><li>有n个带权叶结点的二叉树中，带权路径长度(WPL)最小的二叉树</li><li>也叫最优二叉树</li></ol>				
Σ 哈夫曼树的构造	《哈夫曼树 - 哈夫曼树》	"<ol><li>选择权值最小的两个结点，并成一个二叉树，根结点的值为该两点权值之和</li><li>然后将新二叉树作为子树，权值为根结点，加入结点池中，继续选择权值最小的两个结点合并</li><li>最终并为一个二叉树为止</li><li><cr><img src=""https://mubu.com/document_image/9b2d3579-b70e-499a-81b2-49d8300a7c4a-11521829.jpg""></li></ol>"				
Σ 哈夫曼树的性质特点	《哈夫曼树 - 哈夫曼树》	<ol><li>1.所有初始结点 最终都会变成叶结点</li><li>2.权值越小的结点到根结点的路径长度越大</li><li>3.哈夫曼树的总结点数为2n-1（多出了很多子树的根结点）</li><li>4.哈夫曼树需要合并n-1次</li><li>5.哈夫曼树不存在度为1的结点</li><li>6.哈夫曼树并不唯一，但都最优WPL</li><li>初即末、小即大、不唯一也没有一</li></ol>				
Σ 可变长度编码 的定义	《哈夫曼树 - 哈夫曼树》	<ol><li>允许不同字符用不等长的二进制位表示</li><li>对频率高的字符赋予短编码，频率低的字符赋予长编码，是平均编码长度简短，达到压缩数据效果</li></ol>				
Σ 固定长度编码 的定义	《哈夫曼树 - 哈夫曼树》	每个字符用相等长度的二进制位表示				
Σ 可变长度编码相比于固定长度编码的优势	《哈夫曼树 - 哈夫曼树》	哈夫曼树的的可边长度编码是前缀编码，不会产生歧义				
Σ 前缀编码是什么？举例？	《哈夫曼树 - 哈夫曼树》	<ol><li>没有一个编码是另一个编码的前缀</li><li>哈夫曼树编码</li><li>01 0 001 标准非前缀编码！</li><li>01 10 11，就是不错的前缀编码</li></ol>				
Σ 哈夫曼树可能对应多个编码吗？	《哈夫曼树 - 哈夫曼树》	可以				
Σ 哈夫曼树一定是二叉树吗？	《哈夫曼树 - 哈夫曼树》	不一定				
Σ 哈夫曼树有n个结点，可以得到多少码字？	《哈夫曼树 - 哈夫曼树》	（n+1）/2				
Σ 哈夫曼树如何码字数量最大化？	《哈夫曼树 - 哈夫曼树》	变成满叉树				
Σ 哈夫曼树编码的0和1是什么？	《哈夫曼树 - 哈夫曼树》	"<ol><li>表示左右</li><li><cr><img src=""https://mubu.com/document_image/9425b834-f8c3-41d1-811e-66c44727ed2a-11521829.jpg""></li></ol>"				
线索化二叉树时，初始化要干什么？	对pre指定为NULL					
树与森林的转换，新树使用的是什么表示法？	孩子兄弟表示法（链式储存）					
Σ 图的组成是什么？	《图  - 图的组成定义》	<ol><li>顶点集V</li><li>边集E</li></ol>				
Σ 图的阶是什么？	《图  - 图的组成定义》	<ol><li>也就是顶点的个数</li><li>用|V|表示</li></ol>				
Σ 图的边的条数用什么表示？	《图  - 图的组成定义》	|E|				
Σ 图可以为空集吗？	《图  - 图的组成定义》	<ol><li>不可以，一定是非空集</li><li>线性表可以是空表，树也可以是空树</li></ol>				
Σ 无向图与有向图的区别	《图  - 图的组成定义》	<ol><li>无向图的边称为 边</li><li>有向图的边称为 弧，起点是弧尾，重点是弧头</li></ol>				
Σ 无向图有向图的表示方法区别	《图  - 图的组成定义》	"<ol><li>有向图的边集表示是<cr><img src=""https://mubu.com/document_image/7a5b01db-2110-4781-81de-7a2f1ef8682c-11521829.jpg"" /></li><li>无向图的边集表示是<cr><img src=""https://mubu.com/document_image/b1173205-9fdf-40cc-a639-77e6df5aaa28-11521829.jpg"" /></li></ol>"				
Σ 简单图与多重图的区别	《图  - 图的组成定义》	"<ol><li>简单图不存在重复边</li><li>不存在顶点到自身的边</li><li><cr><img src=""https://mubu.com/document_image/4654ad74-c141-4afa-b44c-cbbd389d1470-11521829.jpg"" /></li></ol>"				
Σ 顶点的度的定义	《图  - 图的组成定义》	<ol><li>无向图的顶点度为TD(v)也就是依附于该顶点边的条数</li><li>有向图的顶点度是以v点为终点的入度ID(v),v点为起点的出度OD(v)</li><li>有向图的顶点度是入度出度之和</li></ol>				
Σ 无向图的度之和与边数的关系	《图  - 图的组成定义》	边的数量X2				
Σ 有向图度之和	《图  - 图的组成定义》	<ol><li>（琢磨琢磨）因为总入度和与总出度和相等</li><li>有向图度为总入度和与总出度和之和</li></ol>				
Σ 路径的定义与表示	《图  - 图的组成定义》	<ol><li>就是顶点之间经过的顶点序列</li><li>vp,vi......</li></ol>				
Σ 图顶点之间一定存在路径对吗？	《图  - 图的组成定义》	错，可能有孤立点				
Σ 有向图路径有向吗？	《图  - 图的组成定义》	<ol><li>有向图路径依然有向</li><li>无向图路径确定双向或者说无向</li></ol>				
Σ 什么是简单路径	《图  - 图的组成定义》	顶点不重复出现的路径				
Σ 什么是简单回路	《图  - 图的组成定义》	除了第一个与最后一个顶点外，其余顶点不重复出现的回路				
Σ 两点之间距离计算的规则	《图  - 图的组成定义》	<ol><li>最短路径存在，则是最短路径的距离</li><li>不存在路径，则距离为无穷</li></ol>				
Σ 无向图连通与有向图强连通的区别	《图  - 图的组成定义》	<ol><li>无向图连通强调，任意两点间有路径存在</li><li>有向图强连通强调，任意两点之间双向都有路径，注意是路径，不是双向都有弧！</li></ol>				
Σ 从图中任意挑几条边和点就可以构成子图吗？	《图  - 图的组成定义》	不，需要保证边具有双端顶点				
Σ 生成子图的定义	《图  - 图的组成定义》	"<ol><li>包含所有原图中的顶点的子图</li><li>（不一定有原图的所有的边）</li><li><cr><img src=""https://mubu.com/document_image/e577895f-07a2-4c12-95a0-1ab449179951-11521829.jpg""></li></ol>"				
Σ 连通分量（极大连通子图）的定义（强连通分量与极大强连通子图）	《图  - 图的组成定义》	"<ol><li>任意两个结点之间存在相互路径！</li><li>原图不一定连通！但连通分量一定连通！所以就要拆分出多个连通分量</li><li>强连通分量一定有环！，因为任意两结点存在相互路径</li><li>极大：在保证图一定连通的前提下，包括尽可能多的顶点与边（不一定包含所有点）</li><li>但是边不能虚构！</li><li><cr><img src=""https://mubu.com/document_image/010a77a8-d120-4e4b-9dde-ed340844efe7-11521829.jpg""></li></ol>"				
Σ 生成树（极小连通子图）的定义	《图  - 图的组成定义》	"<ol><li>包含原图全部顶点，边尽可能少，保持连通</li><li><cr><img src=""https://mubu.com/document_image/cff6bff8-6245-4808-a396-6e0d3c9dd51c-11521829.jpg""></li></ol>"				
Σ 一个图的生成树可能会有多个吗？	《图  - 图的组成定义》	可能				
Σ 生成树添加边与砍掉边的后果？	《图  - 图的组成定义》	<ol><li>砍掉边会变非连通图</li><li>添加边会变成回路</li></ol>				
Σ 生成森林是什么？	《图  - 图的组成定义》	非连通图 中 连通分量 的 生成树				
Σ 边的权是什么？	《图  - 图的组成定义》	每条边的具体含义的数值，比如铁路长度				
Σ 路径 的带权路径长度是什么？	《图  - 图的组成定义》	<ol><li>对比记忆 结点的带权路径长度！</li><li>一条路径所有边的权值之和</li></ol>				
Σ 无向完全图的概念与边数	《图  - 图的组成定义》	"<ol><li>无向图 任意两点都有直接相连的边</li><li>边的总数为<cr><img src=""https://mubu.com/document_image/1dde9760-7c40-4369-95a0-7ac98acd972b-11521829.jpg""></li><li><span>0在n&lt;=1时取到</span></li></ol>"				
Σ 有向完全图的概念与边数	《图  - 图的组成定义》	"<ol><li>有向图 任意两点都有直接相连的 方向相反的 两条弧</li><li><cr><img src=""https://mubu.com/document_image/217878fb-0f52-4ac3-933a-ed28444ac6c1-11521829.jpg""></li><li><span>0在n&lt;=1时取到</span></li></ol>"				
Σ 稀疏图与稠密图的区别	《图  - 图的组成定义》	很抽象，边很少就是稀疏，相反就是稠密				
Σ 树作为图来说，存在回路吗？连通吗？有向图还是无向图？	《图  - 图的组成定义》	不存在回路、连通的无向图				
Σ 有向树的特点是什么？从入度出发	《图  - 图的组成定义》	一个顶点入度为0，其余顶点入度都是1，的有向图				
Σ 树是连通图，有向树是强连通图吗？	《图  - 图的组成定义》	不是，有向树没有双向线！				
Σ 图的组成定义	《图  - 图的组成定义》	<ol><li>图的组成是什么？</li><li>图的阶是什么？</li><li>图的边的条数用什么表示？</li><li>图可以为空集吗？</li><li>无向图与有向图的区别</li><li>无向图有向图的表示方法区别</li><li>简单图与多重图的区别</li><li>顶点的度的定义</li><li>无向图的度之和</li><li>有向图度之和</li><li>路径的定义与表示</li><li>图顶点之间一定存在路径对吗？</li><li>有向图路径有向吗？</li><li>什么是简单路径</li><li>什么是简单回路</li><li>两点之间距离计算的规则</li><li>无向图连通与有向图强连通的区别</li><li>从图中任意挑几条边和点就可以构成子图吗？</li><li>生成子图的定义</li><li>连通分量（极大连通子图）的定义（强连通分量与极大强连通子图）</li><li>生成树（极小连通子图）的定义</li><li>一个图的生成树可能会有多个吗？</li><li>生成树添加边与砍掉边的后果？</li><li>生成森林是什么？</li><li>边的权是什么？</li><li>路径 的带权路径长度是什么？</li><li>无向完全图的概念与边数</li><li>有向完全图的概念与边数</li><li>稀疏图与稠密图的区别</li><li>树作为图来说，存在回路吗？连通吗？有向图还是无向图？</li><li>有向树的特点是什么？从入度出发</li><li>树是连通图，有向树是强连通图吗？</li></ol>				
Σ n个顶点的连通图最少有几条边？	《图  - 基础图计算相关》	n-1				
Σ n个顶点的非连通图最多有几条边？	《图  - 基础图计算相关》	"<cr><img src=""https://mubu.com/document_image/7eb30186-ab16-4200-bbfd-20ae9e6ccecc-11521829.jpg"">"				
Σ n个顶点的强连通图最少多少边？	《图  - 基础图计算相关》	n（回路）				
Σ n个顶点的图的生成树含有多少边？	《图  - 基础图计算相关》	n-1				
Σ n各顶点的图，当|E|>n-1时，一定有回路吗？	《图  - 基础图计算相关》	一定有回路！谨记				
Σ 基础图计算相关	《图  - 基础图计算相关》	<ol><li>n个顶点的连通图最少有几条边？</li><li>n个顶点的非连通图最多有几条边？</li><li>n个顶点的强连通图最少多少边？</li><li>n个顶点的图的生成树含有多少边？</li><li>n各顶点的图，当|E|&gt;n-1时，一定有回路吗？</li></ol>				
Σ 无向图的邻接矩阵有什么特点吗？	《1 - 邻接矩阵法》	对称矩阵				
Σ 图中如果对应行列值为0的话，代表这两个结点不连通吗？	《1 - 邻接矩阵法》	<ol><li>不代表</li><li>仅代表没有直接连通两者的弧/边，</li></ol>				
Σ 有向图邻接矩阵中A行B列为1，代表什么意思？	《1 - 邻接矩阵法》	有一条弧头在A，弧尾为B的直接指向边				
Σ 无向图图求指定结点的度的思路 与时间复杂度	《1 - 邻接矩阵法》	<ol><li>检查该结点的行或列中非零元素的个数，就是度</li><li>时间复杂度为O(n)/O(|v|)</li></ol>				
Σ 有向图 邻接矩阵图求指定结点的 度 的思路 与时间复杂度	《1 - 邻接矩阵法》	<ol><li>检查该结点（在图中找到位置）的行与列中非零元素的个数，行为出度，列为入度，度为二者和</li><li>时间复杂度为O(n)/O(|v|)</li></ol>				
Σ （带权图）有/无向网的存储结构是什么样的？	《1 - 邻接矩阵法》	"<ol><li>如果两点有直接的边，则值为边权</li><li>有时会把自己指向自己的值设为0</li><li><cr><img src=""https://mubu.com/document_image/054121b7-6fcd-4709-b81b-4fdbfa17420c-11521829.jpg""></li></ol>"				
Σ 邻接矩阵的空间复杂度	《1 - 邻接矩阵法》	<ol><li>O(|V|²)</li><li>只与顶点数相关，与实际边数无关</li></ol>				
Σ 邻接矩阵适用于储存什么样的图？	《1 - 邻接矩阵法》	稠密图				
Σ 邻接矩阵法如何计算某点到某点长度为n的路径数目？	《1 - 邻接矩阵法》	"<ol><li>直接展开行列计算</li><li><cr><img src=""https://mubu.com/document_image/f6469ed3-e4ab-4069-af66-8f82e5f1d98b-11521829.jpg""></li></ol>"				
Σ 邻接矩阵法	《1 - 邻接矩阵法》	<ol><li>无向图的邻接矩阵有什么特点吗？</li><li>图中如果对应行列值为0的话，代表这两个结点不连通吗？</li><li>有向图中A行B列为1，代表什么意思？</li><li>无向图图求指定结点的度的思路 与时间复杂度</li><li>有向图图求指定结点的 度 的思路 与时间复杂度</li><li>（带权图）有/无向网的存储结构是什么样的？</li><li>邻接矩阵的空间复杂度</li><li>邻接矩阵适用于储存什么样的图？</li><li>邻接矩阵法如何计算某点到某点长度为n的路径数目？</li></ol>				
Σ 如何求邻接表的度？	《1 - 邻接表》	<ol><li>无向图找他的链，后面几个边结点，度就是多少</li><li>有向图用同样方法可以找到出度，找入度和指向某些节点的只能用全部重新遍历</li></ol>				
Σ 给定图的邻接表的表示方法唯一吗	《1 - 邻接表》	<ol><li>不唯一</li><li>但是给定顶点编号后，邻接矩阵表示唯一！</li></ol>				
Σ 邻接表的空间复杂度 对于无向图有向图	《1 - 邻接表》	<ol><li>对与无向图而言，边结点数量是2|E|，整体空间复杂度为O(|V|+2|E|)</li><li>对与有向图而言，边结点数量是|E|，整体空间复杂度为O(|V|+|E|)</li></ol>				
Σ 邻接表适用于储存什么样的图？邻接矩阵呢？	《1 - 邻接表》	<ol><li>稀疏图</li><li>邻接表储存无向图有边结点的冗余，稀疏图最好</li><li>邻接矩阵适合稠密图</li></ol>				
Σ 邻接表的一大缺点	《1 - 邻接表》	找有向图的出度，需要重新遍历				
Σ 邻接表储存无向图为什么有边结点的冗余？	《1 - 邻接表》	因为一条边是AB同时指向对方的，所以需要储存两次边结点				
"Σ <cr><img src=""https://mubu.com/document_image/6dcee769-a72a-499e-8604-e23d7c25c92f-11521829.jpg"" />"	《1 - 邻接表》	"<cr><img src=""https://mubu.com/document_image/7c659096-2a39-41ae-a468-41b77d1de049-11521829.jpg"">"				
Σ 邻接表	《1 - 邻接表》	"<ol><li>如何求邻接表的度？</li><li>给定图的邻接表的表示方法唯一吗</li><li>邻接表的空间复杂度 对于无向图有向图</li><li>邻接表适用于储存什么样的图？邻接矩阵呢？</li><li>邻接表的一大缺点</li><li>邻接表储存无向图为什么有边结点的冗余？</li><li><cr><img src=""https://mubu.com/document_image/6dcee769-a72a-499e-8604-e23d7c25c92f-11521829.jpg""></li></ol>"				
某图一定存在极大/极小连通子图吗？	不一定，但是连通图一定存在极大/极小连通子图					
图的遍历要求每个结点被访问多少次？	每个结点只能被访问一次					
具有n个结点的无向图，最少需要多少边才能确保一定是连通图？	n-1个顶点构成完全无向图，然后+1<cr>也就是(n-1)(n-2)/2 +1					
n个顶点，e条边的无向图是一个森林，森林必有多少树？<cr>	n-e<cr>设有x棵树，再用x-1条边可以把森林连接为树，此时边数+1=结点数，也就是e+(x-1)+1=n,解得x=n-e					
回路是简单路径吗?	回路对应路径，简单回路对应简单路径					
Σ 判断图G的两顶点间是否存在边的操作是？在邻接矩阵与邻接表中的时间复杂度是？	《1 - 1》	<ol><li>Adjacent(G,x,y)</li><li>邻接矩阵O(n)</li></ol>				
Σ 判断图G与结点x邻接的边的操作是？在邻接矩阵与邻接表中的时间复杂度是？	《1 - 1》	"<ol><li>Neighbors(G,x)</li><li>这个答案是有向图的，出边O(1)-O(v)是因为要遍历穷尽某一出边，最少就是第一个，最多就是最长链V-1个，而如果是入边的话，需要将整个表中所有的边全部遍历，也就是E</li><li>稀疏矩阵适用邻接表<cr><img src=""https://mubu.com/document_image/8308c9e4-23db-4229-946a-a18a523e6f74-11521829.jpg""></li></ol>"				
Σ 在图G中插入顶点x的操作是？在邻接矩阵与邻接表中的时间复杂度是？	《1 - 1》	<ol><li>InsertVertex(G,x)</li><li>双O（1）</li></ol>				
Σ 在图G中插入顶点x的操作思路是？	《1 - 1》	"<ol><li>邻接矩阵，邻接表都是在顺序表中写入新结点信息</li><li><cr><img src=""https://mubu.com/document_image/4752534c-19d9-4c31-a74f-5ce804eb63e7-11521829.jpg"" /></li></ol>"				
Σ 在图G中删除顶点x的操作思路是？	《1 - 1》	<ol><li>邻接矩阵不要将其直接删除，不然移动会很麻烦！</li><li>直接将其全部置零，然后在结点结构体中设置bool，已判定某点是否为空</li><li>邻接表要将当前结点的边表删除，然后遍历所有边表，把该结点删除</li></ol>				
Σ 在图G中删除顶点x的操作是？在邻接矩阵与邻接表中的时间复杂度是？	《1 - 1》	"<ol><li>DeleteVertex(G,x)</li><li><cr><img src=""https://mubu.com/document_image/84bf9b8a-f625-4e65-b5f8-34401605bd81-11521829.jpg"" /></li></ol>"				
Σ 求图G中顶点x的第一个邻接点，若有则返回顶点号。的操作是？在邻接矩阵与邻接表中的时间复杂度是？	《1 - 1》	"<ol><li>FirstNeieghbor(G,x)</li><li><cr><img src=""https://mubu.com/document_image/9a936f8d-bd08-47be-8a32-8e5657794f93-11521829.jpg"" /></li></ol>"				
Σ 求图G中顶点x的第一个邻接点，若有则返回顶点号的操作思路是？	《1 - 1》	<ol><li>邻接矩阵直接遍历</li><li>邻接表直接找到该顶点后第一个边结点就是出边邻接点</li><li>入边邻接点很难找！得全部遍历</li></ol>				
Σ 求图G中x的第二个邻接点的操作是？在邻接矩阵与邻接表中的时间复杂度是？	《1 - 1》	<ol><li>NextNeighbor(G,x,y)</li><li>与找第一个邻接点相同</li></ol>				
"Σ <cr><img src=""https://mubu.com/document_image/fa08a408-60df-41e3-9888-1a6ba46f1589-11521829.jpg"" />"	《1 - 1》	"<cr><img src=""https://mubu.com/document_image/ecab69cb-c8b7-4ac3-9e92-b3e0e8b39804-11521829.jpg"" />"				
Σ 树与图在广度优先搜索的区别	《1 - 广度优先搜索BFS》	<ol><li>树不存在回路，不可能搜索到已被访问过的结点</li><li>图可能存在回路，可能重复访问</li></ol>				
Σ BFS的三个要点是什么？	《1 - 广度优先搜索BFS》	<ol><li>找到与顶点相邻的所有顶点</li><li>标记哪些顶点被访问过</li><li>需要一个辅助队列</li></ol>				
Σ 什么时候BFS遍历序列可变？	《1 - 广度优先搜索BFS》	<ol><li>邻接矩阵形式唯一，不可变</li><li>邻接表表示不唯一，可变</li></ol>				
Σ BFS可以遍历所有类型的图吗？怎么修改？	《1 - 广度优先搜索BFS》	<ol><li>不可以，只能遍历连通图！</li><li>检查完后查看是否表中所有结点都已被访问，若无则顺序遍历第一个非True元素</li></ol>				
Σ 邻接矩阵存储的图，使用BFS，时间复杂度为多少？	《1 - 广度优先搜索BFS》	"<cr><img src=""https://mubu.com/document_image/e72a6a14-8ee2-4c1f-965b-921164f1a103-11521829.jpg"">"				
Σ 邻接表存储的图，使用BFS，时间复杂度为多少？	《1 - 广度优先搜索BFS》	"<cr><img src=""https://mubu.com/document_image/9e960bf9-cfa8-494d-8e1c-7de905e78f92-11521829.jpg"">"				
Σ 广度优先生成树的概念/生成思路	《1 - 广度优先搜索BFS》	"<ol><li>广度优先搜索完成后，只保留遍历使用的边，把其余边去掉，就是广度优先生成树</li><li><cr><img src=""https://mubu.com/document_image/73314d48-1cba-4a7d-b818-5c537a19d887-11521829.jpg""></li></ol>"				
Σ 广度优先生成树唯一吗？	《1 - 广度优先搜索BFS》	<ol><li>邻接矩阵形式唯一，不可变</li><li>邻接表表示不唯一，可变</li><li>仔细思考构建图的BFS序列的过程</li></ol>				
Σ 广度优先生成森林是什么？	《1 - 广度优先搜索BFS》	非连通图的广度优先生成树组成的森林				
Σ 广度优先搜索BFS	《1 - 广度优先搜索BFS》	<ol><li>树与图在广度优先搜索的区别</li><li>BFS的三个要点是什么？</li><li>什么时候BFS遍历序列可变？</li><li>BFS可以遍历所有类型的图吗？怎么修改？</li><li>无向图调用了多少次BFS/DFS？</li><li>邻接矩阵存储的图，使用BFS，时间复杂度为多少？</li><li>邻接表存储的图，使用BFS，时间复杂度为多少？</li><li>广度优先生成树的概念/生成思路</li><li>广度优先生成树唯一吗？</li><li>广度优先生成森林是什么？</li><li>BFS的空间复杂度是多少？</li></ol>				
Σ 无向图调用了多少次BFS/DFS？	《1 - 广度优先搜索BFS》	<ol><li>连通分量数</li><li>细细品！</li></ol>				
Σ BFS的空间复杂度是多少？	《1 - 广度优先搜索BFS》	O(|V|)也就是队列的长度				
Σ DFS的空间复杂度是多少？主要来自于哪里？	《1 - DFS深度优先搜索》	<ol><li>主要来自函数调用栈</li><li>BFS是队列，如何考虑？</li><li>最好情况是花瓣式的调用，此时O(1)</li><li>最坏情况是链式调用，此时递归深度是O(|V|)</li></ol>				
Σ DFS的时间复杂度是多少？邻接矩阵中？邻接表中？	《1 - DFS深度优先搜索》	"<ol><li>与BFS一样</li><li><cr><img src=""https://mubu.com/document_image/1e2c5e6d-6c47-4e25-a269-18b12d9af3d4-11521829.jpg""></li></ol>"				
"Σ 手推深度优先遍历序列，从2开始<cr><img src=""https://mubu.com/document_image/010f5a03-a198-49e7-a1ec-800454010538-11521829.jpg"" />"	《1 - DFS深度优先搜索》	26784315				
Σ 广度优先遍历与深度优先遍历序列与 邻接表与邻接矩阵的关系是什么？	《1 - DFS深度优先搜索》	<ol><li>都是在邻接矩阵下仅有一种序列</li><li>在邻接表下因为邻接表表示不唯一，而有多种序列</li></ol>				
Σ 深度优先生成树唯一吗？	《1 - DFS深度优先搜索》	<ol><li>邻接矩阵形式唯一，不可变</li><li>邻接表表示不唯一，可变</li></ol>				
Σ 对于连通图需要调用多少次BFS/DFS？	《1 - DFS深度优先搜索》	只需要一次！				
Σ 对于有向图进行BFS/DFS遍历，需要调用多少次？	《1 - DFS深度优先搜索》	<ol><li>具体问题具体分析！</li><li>如果其实顶点到其他各顶点都有路径，只需要调用一次！</li></ol>				
Σ 对于强连通图，需要调用多少次BFS/DFS？	《1 - DFS深度优先搜索》	只需要一次！				
Σ DFS深度优先搜索	《1 - DFS深度优先搜索》	"<ol><li>DFS的空间复杂度是多少？主要来自于哪里？</li><li>DFS的时间复杂度是多少？邻接矩阵中？邻接表中？</li><li>手推深度优先遍历序列，从2开始<cr><img src=""https://mubu.com/document_image/010f5a03-a198-49e7-a1ec-800454010538-11521829.jpg""></li><li>广度优先遍历与深度优先遍历序列与 邻接表与邻接矩阵的关系是什么？</li><li>深度优先生成树唯一吗？</li><li>对于连通图需要调用多少次BFS/DFS？</li><li>对于有向图进行BFS/DFS遍历，需要调用多少次？</li><li>对于强连通图，需要调用多少次BFS/DFS？</li></ol>"				
如何判断图的连通性？	BFS/DFS 是否一次能遍历访问所有顶点，如果不能的话，图一定是非连通的					
Σ 什么是最小生成树？	《图的算法 - 所有结点连通，且总代价最小 算法》	<ol><li>也就是最小代价树</li><li>所有结点连通，且总代价最小</li></ol>				
Σ 最小生成树的适用图是什么图？	《图的算法 - 所有结点连通，且总代价最小 算法》	<ol><li>带权无环连通无向图</li><li>连通图才有生成树</li><li>非连通图只有生成森林</li><li>环图没有树 无向图才能适用该计算法</li></ol>				
Σ 最小生成树的E与V的关系，如果砍掉/增加一条E呢？	《图的算法 - 所有结点连通，且总代价最小 算法》	<ol><li>E=V-1</li><li>砍掉一条会不连通，增加一条会有回路</li></ol>				
Σ 最小代价树会有多个吗？	《图的算法 - 所有结点连通，且总代价最小 算法》	<ol><li>会</li><li>但权值和唯一且最小</li></ol>				
Σ 最小生成树的构建算法有哪些？	《图的算法 - 所有结点连通，且总代价最小 算法》	<ol><li>Prim普里姆算法</li><li>Kruskal 克鲁斯卡尔算法</li></ol>				
Σ Prim算法的思路是什么？	《图的算法 - 所有结点连通，且总代价最小 算法》	<ol><li>从顶点开始构建生成树</li><li>将代价最小的新顶点纳入生成树</li><li>直到纳入所有顶点为止</li></ol>				
"Σ 手推一下Prim算法的最终最小生成树<cr><img src=""https://mubu.com/document_image/18720666-ce55-4820-8240-baa81030c205-11521829.jpg"">"	《图的算法 - 所有结点连通，且总代价最小 算法》	"<cr><img src=""https://mubu.com/document_image/6a38f932-35d0-4806-9282-86267d295e1c-11521829.jpg"">"				
Σ Kruskal算法的思路是什么？	《图的算法 - 所有结点连通，且总代价最小 算法》	<ol><li>每次选择最小权值的边</li><li>使边的两头连通！（除非已经被连通）</li><li>直到所有结点连通</li></ol>				
"Σ 手推一下Kruskal算法的最终最小生成树<cr><img src=""https://mubu.com/document_image/18720666-ce55-4820-8240-baa81030c205-11521829.jpg"" />"	《图的算法 - 所有结点连通，且总代价最小 算法》	"<cr><img src=""https://mubu.com/document_image/6a38f932-35d0-4806-9282-86267d295e1c-11521829.jpg"">"				
Σ 思考Prim算法与Kruskal算法的过程区别	《图的算法 - 所有结点连通，且总代价最小 算法》	<ol><li>Prim算法以点为根基，每次找可以使当前生成树连通代价最小的新顶点</li><li>Kruskal算法以边为根基，每次找权值最小（不用在乎连通）的边连通</li></ol>				
Σ Prim算法的时间复杂度与适用是？	《图的算法 - 所有结点连通，且总代价最小 算法》	"只和顶点数有关<cr><img src=""https://mubu.com/document_image/bd481177-fe51-41d5-b54a-5d29728e08fa-11521829.jpg"">"				
Σ Kruskal算法的时间复杂度与适用是？	《图的算法 - 所有结点连通，且总代价最小 算法》	"只和边数有关<cr><img src=""https://mubu.com/document_image/b8bed8d6-fb84-4c3d-9227-229b0e612942-11521829.jpg"">"				
Σ 所有结点连通，且总代价最小 算法	《图的算法 - 所有结点连通，且总代价最小 算法》	"<ol><li>什么是最小生成树？</li><li>最小生成树的适用图是什么图？</li><li>最小生成树的E与V的关系，如果砍掉/增加一条E呢？</li><li>最小代价树会有多个吗？</li><li>最小生成树的构建算法有哪些？</li><li>Prim算法的思路是什么？</li><li>手推一下Prim算法的最终最小生成树<cr><img src=""https://mubu.com/document_image/18720666-ce55-4820-8240-baa81030c205-11521829.jpg""></li><li>Kruskal算法的思路是什么？</li><li>手推一下Kruskal算法的最终最小生成树<cr><img src=""https://mubu.com/document_image/18720666-ce55-4820-8240-baa81030c205-11521829.jpg""></li><li>思考Prim算法与Kruskal算法的过程区别</li><li>Prim算法的时间复杂度与适用是？</li><li>Kruskal算法的时间复杂度与适用是？</li></ol>"				
Σ 单源最短路径算法的解决算法有哪些？适用？？	《图的算法 - 单源最短路径 算法》	<ol><li>BFS算法用于无权图</li><li>Dijkstra算法用于 带权图与无权图</li></ol>				
Σ BFS计算单源最短路径的思路是什么？	《图的算法 - 单源最短路径 算法》	<ol><li>定义两个数组，一个代表从源头出发到该点的最短路径的长度，一个代表经过该点的最短路径的前置点下标</li><li>定义一个队列，用于BFS检索</li><li>每次广度优先遍历，将遍历点的最短路径长度设置为前置点最短路径长度+1，修改其前置结点</li><li>最后表中可以得到最短路径</li></ol>				
Σ BFS计算单源最短路径时，需要定义哪两个数组？	《图的算法 - 单源最短路径 算法》	定义两个数组，一个代表从源头出发到该点的最短路径的长度，一个代表经过该点的最短路径的前置点下标				
Σ BFS计算单源最短路径的遍历思路是什么？	《图的算法 - 单源最短路径 算法》	每次广度优先遍历，将遍历点的最短路径长度设置为前置点最短路径长度+1，修改其前置结点				
Σ 广度优先遍历与广度优先生成树的关系	《图的算法 - 单源最短路径 算法》	广度优先生成树中，某一个结点的深度，就是他的最短路径长度，前置结点就是双亲节点				
Σ Dijkstra算法的思路是什么？	《图的算法 - 单源最短路径 算法》	<ol><li>定义三个数组，一个代表各顶点是否找到最短路径，一个代表该点目前最短路径长度，一个代表该最短路径的前置结点</li><li>循环遍历所有结点，找到没确定最短路径，且最短路径最小的顶点，访问他，并将确定最短路径设置为true</li><li><span>然后查找当前结点的邻接结点，若当前结点的最短路径+当前结点到邻接节点的最短路径&lt;邻接节点的原最短路径，对所有未有最短路径的邻接节点更新最短路径长度与前置结点</span></li><li>直到所有的结点都有最短路径</li></ol>				
Σ Dijkstra算法需要定义哪三个数组？	《图的算法 - 单源最短路径 算法》	定义三个数组，一个代表各顶点是否找到最短路径，一个代表该点目前最短路径长度，一个代表该最短路径的前置结点				
Σ Dijkstra算法计算单源最短路径的遍历思路是什么？	《图的算法 - 单源最短路径 算法》	<ol><li>循环遍历所有结点，找到没确定最短路径，且最短路径最小的顶点，访问他，并将确定最短路径设置为true</li><li><span>然后查找当前结点的邻接结点，若当前结点的最短路径+当前结点到邻接节点的最短路径&lt;邻接节点的原最短路径，对所有未有最短路径的邻接节点更新最短路径长度与前置结点</span></li><li>直到所有的结点都有最短路径</li></ol>				
Σ Dijkstra算法的时间复杂度是多少？	《图的算法 - 单源最短路径 算法》	"具有动态规划思想<cr><img src=""https://mubu.com/document_image/424c9c5f-ba0f-4c97-9705-60fa3cfa7f11-11521829.jpg"">"				
Σ Dijkstra算法什么时候失效？怎么补救？	《图的算法 - 单源最短路径 算法》	<ol><li>负权值带权图，某点的最短路径可能因为负值而不再是最短路径，此时也无法判断是否是最短路径（动态规划的步步最优不再适用），再回头修改前置结点了</li><li>可以用贝尔曼福德算法或者Floyd算法补救</li></ol>				
Σ 单源最短路径 算法	《图的算法 - 单源最短路径 算法》	<ol><li>单源最短路径算法的解决算法有哪些？</li><li>BFS计算单源最短路径的思路是什么？</li><li>BFS计算单源最短路径时，需要定义哪两个数组？</li><li>BFS计算单源最短路径的遍历思路是什么？</li><li>广度优先遍历与广度优先生成树的关系</li><li>Dijkstra算法的思路是什么？</li><li>Dijkstra算法需要定义哪三个数组？</li><li>Dijkstra算法计算单源最短路径的遍历思路是什么？</li><li>Dijkstra算法的时间复杂度是多少？</li><li>Dijkstra算法什么时候失效？怎么补救？</li></ol>				
Σ 各顶点间最短路径算法的解决算法有哪些？	《图的算法 - 各顶点间的最短路径 算法》	一般采用Floyd算法，有/无权图，都可以直接使用				
Σ 图的算法	《图的算法》	<ol><li>所有结点连通，且总代价最小 算法</li><li>单源最短路径 算法</li><li>各顶点间的最短路径 算法</li><li>计算顶点间某长度路径条数的算法（邻接矩阵的幂）</li></ol>				
判断有向图是否有回路，可以采用的方法有？	DFS、拓扑排序					
判断DFS和BFS序列正确性需要注意的是？	DFS是函数栈 BFS是队列 DFS某条路走不通的话，需要逐步拆栈，直到可以走或者栈空为止					
DFS类似树中的什么遍历算法？	先序遍历算法，因为是一条路走到黑！仔细想想！					
Σ Floyd算法的思路是什么？	《图的算法 - 各顶点间的最短路径 算法》	<ol><li>求某两点最短路径，可以逐步考虑</li><li>如果不允许其他顶点中转，最短路径是？</li><li>如果允许在V0顶点中转，最短路径是？</li><li>如果允许在V0 V1顶点中转，最短路径是？</li><li>.....所有顶点</li></ol>				
Σ Floyd算法需要建立的储存结构是？	《图的算法 - 各顶点间的最短路径 算法》	<ol><li>两个矩阵，一个储存目前各顶点间最短路径长度</li><li>一个是储存两个顶点间的中转点</li></ol>				
Σ Floyd算法可以用Dijkstra算法替代吗？区别在哪？	《图的算法 - 各顶点间的最短路径 算法》	<ol><li>也可以，重复|V|次Dijkstra算法就OK了，时间复杂度也是O(|V|^3)</li><li>Floyd算法可以计算负权图</li></ol>				
Σ Floyd算法的时间复杂度是多少？	《图的算法 - 各顶点间的最短路径 算法》	O(|V|^3)				
"Σ <cr><img src=""https://mubu.com/document_image/b1490e5b-4906-44d4-aac3-a714fe49214c-11521829.jpg"" />"	《图的算法 - 各顶点间的最短路径 算法》	"<cr><img src=""https://mubu.com/document_image/4368293b-edb4-47dd-8631-2cd30e36ad02-11521829.jpg"">"				
Σ 各顶点间的最短路径 算法	《图的算法 - 各顶点间的最短路径 算法》	"<ol><li>各顶点间最短路径算法的解决算法有哪些？</li><li>Floyd算法的思路是什么？</li><li>Floyd算法需要建立的储存结构是？</li><li>Floyd算法课以用Dijkstra算法替代吗？区别在哪？</li><li>Floyd算法的时间复杂度是多少？</li><li><cr><img src=""https://mubu.com/document_image/b1490e5b-4906-44d4-aac3-a714fe49214c-11521829.jpg""></li></ol>"				
Σ DAG图常应用于那些地方？	《DAG图以及应用 - DAG图》	<ol><li>DAG图描述表达式</li><li>拓扑排序</li></ol>				
Σ 什么是DAG图？	《DAG图以及应用 - DAG图》	<ol><li>有向无环图</li><li>有向图中不存在环的图</li></ol>				
Σ DAG图描述表达式的缩减思路是什么？	《DAG图以及应用 - DAG图》	将表达式用二叉树表示，然后用DAG图将重复的子树结果合并，以减少子树的结点数量				
Σ DAG描述表达式结果的特点	《DAG图以及应用 - DAG图》	顶点中不存在重复操作数，也就是最底层的叶子结点的数字 出现且仅出现过一次				
Σ DAG描述表达式的解题思路	《DAG图以及应用 - DAG图》	<ol><li>将操作数不重复排成一排</li><li>标出各个结点的生效顺序</li><li>按顺序加入运算符，并注意分层</li><li>分层就是看两边的操作数是否已经用到了某些运算符，如果用到了的话，则这个新运算符一定在最高旧运算符的高一层</li><li>最后将相同的 运算符与操作数组成的子树 合并</li></ol>				
"Σ 尝试画出子树<cr><img src=""https://mubu.com/document_image/1153a9ba-ca23-4850-b9ac-b483b7060a7a-11521829.jpg"" />"	《DAG图以及应用 - DAG图》	"<cr><img src=""https://mubu.com/document_image/ae484d75-de62-492a-becd-c7c047aa7f0f-11521829.jpg"" />"				
Σ DAG图	《DAG图以及应用 - DAG图》	"<ol><li>DAG图常应用于那些地方？</li><li>什么是DAG图？</li><li>DAG图描述表达式的缩减思路是什么？</li><li>DAG描述表达式结果的特点</li><li>DAG描述表达式的解题思路</li><li>尝试画出子树<cr><img src=""https://mubu.com/document_image/1153a9ba-ca23-4850-b9ac-b483b7060a7a-11521829.jpg"" /></li></ol>"				
Σ 什么是拓扑排序？什么图组成的序列，特点是什么？	《DAG图以及应用 - 拓扑排序》	<ol><li>由一个有向无环图的顶点组成的序列</li><li>当且仅当满足下列条件时，称为该图的一个拓扑排序:</li><li>1.每个顶点出现且只出现一次。</li><li>2.若顶点A在序列中排在顶点B的前面，则在图中不存在从顶点B到顶点A的路径。(单向通往，无环)</li></ol><div>单向单次有向无环图</div>				
Σ AOV网的概念	《DAG图以及应用 - 拓扑排序》	用DAG图表示一个工程，顶点表示活动，有向边表示某活动必须先于某活动进行				
Σ 如何实现拓扑排序？AOV网	《DAG图以及应用 - 拓扑排序》	<ol><li>AOV网中选择入度为0的顶点输出</li><li>在网中删除该顶点和所有以它为 起点 的有向边</li><li>重复前面的步骤直到AOV网为空，或者网中不存在无前驱的顶点（也就是所有顶点入度都&gt;0）为止</li></ol>				
Σ AOV网求拓扑排序的 邻接表存储 与邻接矩阵算法的时间复杂度？	《DAG图以及应用 - 拓扑排序》	O(|V|+|E|) 与O(|V|^2)				
Σ 逆拓扑排序与拓扑排序的区别是什么？	《DAG图以及应用 - 拓扑排序》	<ol><li>拓扑排序每次选择一个 入度为0 的顶点输出</li><li>逆拓扑排序每次选择一个 出度为0 的顶点输出</li><li>从网中删除该顶点以及以它为 起点/终点的有向边</li></ol>				
Σ 逆拓扑排序的DFS算法排序思路	《DAG图以及应用 - 拓扑排序》	<ol><li>每次从一个顶点出发，设置该顶点为true</li><li>然后DFS递归调用，最后找到最终结点输出，然后递归栈倒回 继续DFS</li></ol>				
Σ 如何在逆拓扑排序的DFS算法中判断存在回路？	《DAG图以及应用 - 拓扑排序》	DFS如果下一个结点是已被标记为True，则逆拓扑失败（初步思路）				
Σ 拓扑排序	《DAG图以及应用 - 拓扑排序》	<ol><li>什么是拓扑排序？</li><li>AOV网的概念</li><li>如何实现拓扑排序？</li><li>AOV网中有多少个拓扑排序序列？</li><li>AOV网求拓扑排序的 邻接表存储 与邻接矩阵算法的时间复杂度？</li><li>逆拓扑排序与拓扑排序的区别是什么？</li><li>逆拓扑排序时间复杂度？如何判断环路？</li><li>逆拓扑排序的DFS算法排序思路</li><li>如何在逆拓扑排序的DFS算法中判断存在回路？</li></ol>				
Σ 什么是AOE网？与AOV网的区别？	《DAG图以及应用 - 关键路径》	<ol><li>带权有向图中，顶点表示事件，有向边表示活动，边上权值代表完成该活动的 开销</li><li>也叫做用边表示活动的网络，AOV是顶点表示活动，而且没有权</li></ol>				
Σ AOE网的三个性质是什么？	《DAG图以及应用 - 关键路径》	<ol><li>顶点事件发生后，该顶点出发的各有向边活动才能发生！（顶点是边活动发生的前提）</li><li>只有进入某顶点的各有向边代表的活动都结束的时候，顶点事件才能发生（边活动都！结束，才可以发生顶点事件）</li><li>活动可以并行！</li></ol>				
Σ AOE网的源点与汇点是什么？	《DAG图以及应用 - 关键路径》	<ol><li>AOE网中仅有的一个入度为0的顶点 源点 代表工程的开始</li><li>仅有的一个出度为0的顶点 汇点 代表工程的结束</li></ol>				
Σ 什么是关键路径与关键活动？	《DAG图以及应用 - 关键路径》	<ol><li>源点到汇点的有向路径上，具有最大路径长度的路径叫做关键路径（时间开销最长）（他必须做，而其他事可以在他做的同时一起做，而且因为时间比关键路径短，所以可以自由选择起始时间）</li><li>此关键路径上的活动成为关键活动</li></ol>				
Σ AOE网中完成整个工程的最短时间是？	《DAG图以及应用 - 关键路径》	关键路径的长度				
Σ 事件Vk的最早发生时间 与 活动Ai的最早开始时间 区别是什么？	《DAG图以及应用 - 关键路径》	<ol><li>事件Vk最早发生时间是结点开始时间,决定从Vk开始的 活动A 的最早时间</li><li>活动Ai最早开始时间 指这条弧的起点表示 事件V 的最早发生时间</li></ol>				
Σ 事件Vk的最迟发生时间 与 活动Ai的最迟开始时间 区别是什么？	《DAG图以及应用 - 关键路径》	<ol><li>事件Vk的最迟发生时间 是不推迟工程的前提下，最迟发生时间</li><li>活动Ai的最迟开始时间 是这条弧的终点表示事件的最迟发生时间 与活动所需时间之差！（也就是切鸡蛋两分钟，煮饭四分钟，我可以在煮饭的最后两分钟开始切鸡蛋）</li></ol>				
Σ 什么是活动的时间余量？	《DAG图以及应用 - 关键路径》	不增加工程总时间的前提下，活动可以拖延的时间				
Σ 如何判断一个活动是关键活动？	《DAG图以及应用 - 关键路径》	<ol><li>可以通过判断关键路径判断</li><li>也可以通过判断时间余量为0判断</li></ol>				
Σ 关键活动的时间缩短可以缩短工期吗？如果多条关键路径呢？	《DAG图以及应用 - 关键路径》	<ol><li>不一定，一开始如果是唯一的关键路径的话可以缩短工期</li><li>缩短到一定程度，关键活动可能会变成非关键活动</li><li>如果有多条关键路径，缩短在所有关键路径上包含的关键活动时间才可以缩短工期</li></ol>				
Σ 如何求所有事件的最迟发生时间？	《DAG图以及应用 - 关键路径》	<ol><li>初始点为汇点，最迟发生时间等于最早发生时间（因为所有的操作都建立在不耽误工期的基础上），如V6=8</li><li>逆拓扑排序后遍历，某结点事件的最迟发生时间是后继结点的最迟发生时间-路径的时间开销</li><li>如果某结点有多个后继结点，则比较该结点的最迟发生时间，选取最小的（因为要保证关键路径）</li></ol>				
Σ 如何求所有事件的最早发生时间？	《DAG图以及应用 - 关键路径》	<ol><li>初始点为源点，最早发生时间设为0</li><li>拓扑排序后遍历，某结点事件的最早发生时间是前置结点的最早发生时间+路径的时间开销</li><li>如果某结点有多个前置结点，则比较该结点的最早发生时间，选取最大的（因为要保证关键路径）</li></ol>				
Σ 如何求所有活动的时间余量？	《DAG图以及应用 - 关键路径》	某活动的最迟发生时间-最早发生时间				
Σ 关键路径	《DAG图以及应用 - 关键路径》	<ol><li>什么是AOE网？与AOV网的区别？</li><li>AOE网的三个性质是什么？</li><li>AOE网的源点与汇点是什么？</li><li>什么是关键路径与关键活动？</li><li>AOE网中完成整个工程的最短时间是？</li><li>事件Vk的最早发生时间 与 活动Ai的最早开始时间 区别是什么？</li><li>事件Vk的最迟发生时间 与 活动Ai的最迟开始时间 区别是什么？</li><li>什么是活动的时间余量？</li><li>如何判断一个活动是关键活动？</li><li>关键活动的时间缩短可以缩短工期吗？如果多条关键路径呢？</li><li>如何求所有事件的最迟发生时间？</li><li>如何求所有事件的最迟发生时间？</li><li>如何求所有活动的时间余量？</li></ol>				
Σ DAG图以及应用	《DAG图以及应用》	<ol><li>DAG图</li><li>拓扑排序</li><li>关键路径</li></ol>				
C语言中 return后面要跟（）吗	有没有都一样，（）代表表达式					
DFS和BFS分别可以解决什么问题，在图中	DFS可以实现逆拓扑排序，BFS实现单源最短路径					
Σ 什么是关键字？	《查找的分类与概念 - 查找概念》	<ol><li>数据元素中唯一表示该元素的某个数据项的值</li><li>基于关键字的查找，查找结果应该是唯一的</li></ol>				
Σ 动态查找表和静态查找表的使用区别有哪些？	《查找的分类与概念 - 查找概念》	<ol><li>静态查找表只关注查询，仅关注查找速度</li><li>动态查找表还要额外关注插删操作是否方便实现</li></ol>				
Σ 什么是查找长度？什么是平均查找长度ASL？	《查找的分类与概念 - 查找概念》	"<ol><li>查找运算中，需要对比关键字的次数</li><li>对所有查找过程中进行关键字比较次数的平均值</li><li><cr><img src=""https://mubu.com/document_image/ca2c570f-18a5-46c3-b918-0aa423715793-11521829.jpg""></li></ol>"				
"Σ 算算 二叉排序树的查找成功 查找失败的ASL<cr><img src=""https://mubu.com/document_image/d3a7f4a3-c05f-4cb4-848e-4db31acad5c4-11521829.jpg"" />"	《查找的分类与概念 - 查找概念》	"<cr><img src=""https://mubu.com/document_image/3f01e289-5af0-4362-8299-396987440e71-11521829.jpg""><cr><img src=""https://mubu.com/document_image/37b5ca63-8217-4364-9c1f-e7471912f33a-11521829.jpg"">"				
Σ 为什么ASL的数量级反应了什么？	《查找的分类与概念 - 查找概念》	查找算法时间复杂度				
Σ 查找概念	《查找的分类与概念 - 查找概念》	"<ol><li>什么是关键字？</li><li>动态查找表和静态查找表的使用区别有哪些？</li><li>什么是查找长度？什么是平均查找长度ASL？</li><li>算算 二叉排序树的查找成功 查找失败的ASL<cr><img src=""https://mubu.com/document_image/d3a7f4a3-c05f-4cb4-848e-4db31acad5c4-11521829.jpg"" /></li><li>为什么ASL的数量级反应了什么？</li></ol>"				
Σ 顺序查找的算法思想与优化变体是什么？	《查找的分类与概念 - 顺序查找》	<ol><li>从头到jio或者反过来遍历一遍</li><li>有序表优化--查找判定树</li><li>概率不等表的优化--类哈夫曼树</li></ol>				
Σ 顺序查找一般用于什么数据结构？	《查找的分类与概念 - 顺序查找》	线性表，不管是顺序表还是链表都OK				
Σ 分析 顺序查找 ASL成功与ASL失败	《查找的分类与概念 - 顺序查找》	"<ol><li>每个元素被查找到的概率都是1/n，而且查找到第一个元素需要1次，第二个需要两次<cr><img src=""https://mubu.com/document_image/edfbfa09-6ea3-46d0-ab30-af74842a7c7a-11521829.jpg"" /></li><li>查找失败的情况下，需要查找n+1次，结果也就是O（n）</li></ol>"				
Σ 如何针对 有序表 的顺序查找进行优化？	《查找的分类与概念 - 顺序查找》	"<ol><li>可以通过将有序表变成查找判定树</li><li><cr><img src=""https://mubu.com/document_image/1d72763d-591a-4b24-9cd2-4d70eac2530a-11521829.jpg""></li></ol>"				
Σ 查找判定树 查找ASL中 一个成功结点的查找长度 与层数的关系是什么？	《查找的分类与概念 - 顺序查找》	该结点自身所在的层数				
Σ 查找判定树 查找ASL中 一个失败结点的查找长度 是什么？	《查找的分类与概念 - 顺序查找》	该结点父结点所在的层数				
Σ 如果顺序查找的每个结点被查的概率不相等，如何优化？	《查找的分类与概念 - 顺序查找》	<ol><li>可以将被查概率大的放在顺序表靠前位置</li><li>思路类似于哈夫曼树</li></ol>				
Σ 顺序查找	《查找的分类与概念 - 顺序查找》	<ol><li>顺序查找的算法思想与优化变体是什么？</li><li>顺序查找一般用于什么数据结构？</li><li>分析 顺序查找 ASL成功与ASL失败</li><li>如何针对 有序表 的顺序查找进行优化？</li><li>查找判定树 查找ASL中 一个成功结点的查找长度 是什么？</li><li>查找判定树 查找ASL中 一个失败结点的查找长度 是什么？</li><li>如果顺序查找的每个结点被查的概率不相等，如何优化？</li></ol>				
Σ 折半查找的适用结构？	《查找的分类与概念 - 折半查找》	<ol><li>有序的顺序表</li><li>不可以用于链表！！！！（因为链表不能随机访问）</li></ol>				
Σ 折半查找的思路是什么？	《查找的分类与概念 - 折半查找》	<ol><li>两个int储存头指针high与尾指针low位置</li><li>找到顺序表下表的中值，如果结果大于中值所对应的数值，则low=mid+1，小于则high=mid-1，继续查找中值</li><li>直到头指针与尾指针重合</li><li>如果此时找到了元素就是OK，找不到就low=mid+1</li><li>如果low&gt;high，则查找失败</li></ol>				
Σ 折半查找取中值的时候，是向上取整还是向下取整	《查找的分类与概念 - 折半查找》	向下取整				
Σ 折半查找的ASL成功与失败怎么算？	《查找的分类与概念 - 折半查找》	"<cr><img src=""https://mubu.com/document_image/8460fd34-1154-49a5-bbb0-df6d5659cd91-11521829.jpg"">"				
Σ 如果折半查找时，元素数量为偶数个的话，构建折半查找判定树的时候会有什么后果？	《查找的分类与概念 - 折半查找》	左半部分比右半部分少一个元素				
Σ 如果折半查找时，中值向下取整，构建折半查找判定树的左子树节点数与右子树结点数的数量关系	《查找的分类与概念 - 折半查找》	右子树-左子树=0/1				
Σ 如果折半查找时，中值向下取整，自己动手画树的构造历程	《查找的分类与概念 - 折半查找》	"一定要优先从右子树插入<cr><img src=""https://mubu.com/document_image/44999329-43dc-418d-a679-6101613a17b6-11521829.jpg"">"				
Σ 折半查找判定树一定是平衡二叉排序树吗？	《查找的分类与概念 - 折半查找》	一定是！				
Σ 折半查找判定树一定是完全二叉树吗？	《查找的分类与概念 - 折半查找》	不一定，可能会有时候是完全二叉树				
Σ n个结点的折半查找判定树的失败节点是多少个？	《查找的分类与概念 - 折半查找》	n+1个空链域，也就是n+1个失败节点				
Σ 折半查找判定树的树高是多少？	《查找的分类与概念 - 折半查找》	"<cr><img src=""https://mubu.com/document_image/e2e12288-0e5c-4854-ad0f-85be29f662a4-11521829.jpg"">"				
Σ 折半查找的速度一定比顺序查找更快吗？	《查找的分类与概念 - 折半查找》	大部分情况下是，但是不一定是，比如第一个元素就是所求值				
Σ 折半查找	《查找的分类与概念 - 折半查找》	<ol><li>折半查找的适用结构？</li><li>折半查找的思路是什么？</li><li>折半查找取中值的时候，是向上取整还是向下取整</li><li>折半查找的ASL成功与失败怎么算？</li><li>如果折半查找时，元素数量为偶数个的话，构建折半查找判定树的时候会有什么后果？</li><li>如果折半查找时，中值向下取整，构建折半查找判定树的左子树节点数与右子树结点数的数量关系</li><li>如果折半查找时，中值向下取整，自己动手画树的构造历程</li><li>折半查找判定树一定是平衡二叉排序树吗？</li><li>折半查找判定树一定是完全二叉树吗？</li><li>n个结点的折半查找判定树的失败节点是多少个？</li><li>折半查找判定树的树高是多少？</li><li>折半查找的速度一定比顺序查找更快吗？</li></ol>				
Σ 什么是分块查找的索引表？	《查找的分类与概念 - 分块查找》	储存每个分块的 最大关键字 和 分块存储区间的顺序表				
Σ 分块查找的思想是什么？	《查找的分类与概念 - 分块查找》	<ol><li>建立一个索引表</li><li>然后先 折半/顺序 遍历索引表找到对应区间，再用顺序查找找到区间内的所求值</li><li>如果顺序遍历的元素没有所求元素，则查找失败</li></ol>				
Σ 分块查找的特点是什么？	《查找的分类与概念 - 分块查找》	块内无序、块间有序				
Σ 分块查找每一块的元素数目都相同吗？	《查找的分类与概念 - 分块查找》	不一定				
Σ 如果用折半查找遍历索引表，当low>high是否代表查找失败？应该怎么做	《查找的分类与概念 - 分块查找》	<ol><li>不一定代表，因为值如果在low区间的话，也会出现这种情况！因为low的标示值是low区间的最大值！而所求值可能在low区间中而不等于low！</li><li>直接在low分块中查找</li><li>而如果low指空的话，代表查找失败了</li></ol>				
Σ 确定分块查找的ASL，需要注意什么？	《查找的分类与概念 - 分块查找》	如果是折半搜索索引表，要注意算入折半的次数！				
Σ 分块查找 全用顺序查找的方法查找，查找表长度为n，均匀分成b块，每块s个元素，则ASL最小为多少？	《查找的分类与概念 - 分块查找》	"<cr><img src=""https://mubu.com/document_image/1836f4d8-3c5a-4c50-a8b1-fac8ebacb36f-11521829.jpg"">"				
Σ 分块查找 用折半索引+顺序查找的方法查找，查找表长度为n，均匀分成b块，每块s个元素，则ASL最小为多少？	《查找的分类与概念 - 分块查找》	"<cr><img src=""https://mubu.com/document_image/2a783443-928b-4a95-b4ed-1261ae7f8da5-11521829.jpg"">"				
Σ 如果查找表是动态查找表，改进思路是什么？	《查找的分类与概念 - 分块查找》	"<ol><li>因为原查找表可能需要大量移动元素，很麻烦</li><li>可以直接使用链式存储</li><li><cr><img src=""https://mubu.com/document_image/a84c7d3d-bdac-4d5d-9743-15078da7eba7-11521829.jpg""></li></ol>"				
Σ 分块查找	《查找的分类与概念 - 分块查找》	<ol><li>什么是分块查找的索引表？</li><li>分块查找的思想是什么？</li><li>分块查找的特点是什么？</li><li>分块查找每一块的元素数目都相同吗？</li><li>如果用折半查找遍历索引表，当low&gt;high是否代表查找失败？应该怎么做</li><li>确定分块查找的ASL，需要注意什么？</li><li>分块查找 全用顺序查找的方法查找，查找表长度为n，均匀分成b块，每块s个元素，则ASL最小为多少？</li><li>分块查找 用折半索引+顺序查找的方法查找，查找表长度为n，均匀分成b块，每块s个元素，则ASL最小为多少？</li><li>如果查找表是动态查找表，改进思路是什么？</li></ol>				
Σ 查找的分类与概念	《查找的分类与概念》	<ol><li>查找概念</li><li>顺序查找</li><li>折半查找</li><li>分块查找</li></ol>				
Σ 二叉搜索树BST的特点是什么？	《 二叉搜索树与平衡二叉树 - 二叉搜索树》	<ol><li>左子树上所有结点的关键字均小于根结点的关键字</li><li>右子树所有结点的关键字均小于根结点的关键字</li><li>左右子树又各是二叉搜索树</li></ol>				
Σ 二叉搜索树如何遍历得到一个递增有序序列	《 二叉搜索树与平衡二叉树 - 二叉搜索树》	中序遍历				
Σ 二叉搜索树如何提高搜索效率？	《 二叉搜索树与平衡二叉树 - 二叉搜索树》	变成平衡二叉搜索树				
Σ 二叉搜索树查找的两种思路	《 二叉搜索树与平衡二叉树 - 二叉搜索树》	<ol><li>非递归直接查找</li><li>递归查找</li></ol>				
Σ 二叉搜索树的递归查找与非递归查找的空间复杂度比较	《 二叉搜索树与平衡二叉树 - 二叉搜索树》	<ol><li>递归查找的O（n）</li><li>非递归查找为O（1）</li></ol>				
Σ 不同关键字序列一定得不到同款二叉搜索树吗？	《 二叉搜索树与平衡二叉树 - 二叉搜索树》	不一定，有可能得到同款二叉搜索树				
Σ 二叉搜索树 删除结点z，而z只有一棵左子树/右子树的策略是什么	《 二叉搜索树与平衡二叉树 - 二叉搜索树》	让z的子树称为z父结点的子树，替代z的位置				
Σ 二叉搜索树 删除结点z，而z有左右两棵子树，如删除的策略是什么？	《 二叉搜索树与平衡二叉树 - 二叉搜索树》	<ol><li>可以让z的直接后继/直接前驱结点（一定是叶子结点）替代z，然后从让该结点的子树（如果有的话）直接替代该结点的原位置</li><li>注意全程使用中序遍历，因为要得到一个递增序列</li><li>中序遍历某结点的直接后继是它右节点的最左下结点，直接前驱是它左结点的最右下结点</li></ol>				
Σ 二叉搜索树	《 二叉搜索树与平衡二叉树 - 二叉搜索树》	<ol><li>二叉搜索树BST的特点是什么？</li><li>二叉搜索树如何得到一个递增有序序列</li><li>二叉搜索树如何提高搜索效率？</li><li>二叉搜索树查找的两种思路</li><li>二叉搜索树的递归查找与非递归查找的空间复杂度比较</li><li>不同关键字序列一定得不到同款二叉搜索树吗？</li><li>二叉搜索树 删除结点z，而z只有一棵左子树/右子树的策略是什么</li><li>二叉搜索树 删除结点z，而z有左右两棵子树，如删除的策略是什么？</li></ol>				
Σ 平衡二叉树的简写是什么？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	AVL树				
Σ 平衡二叉树的定义是什么？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	树上任意一点的左子树与右子树的高度之差不超过1				
Σ 如何用参数判断一个树是不是平衡二叉树？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	平衡二叉树的每一个结点的平衡因子只能是-1/0/1				
Σ 结点的平衡因子是什么？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	该结点的左子树高-右子树高				
Σ 平衡二叉树插入时会遇到什么情况？解决思路是什么？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	<ol><li>插入时会遇到平衡二叉树不再平衡</li><li>解决思路是找到最小不平衡子树进行调整</li></ol>				
Σ 我们研究的平衡二叉树一般是二叉搜索树吗？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	是的，一般研究都是平衡二叉搜索树				
Σ 什么是最小不平衡子树？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	<ol><li>找到不平衡结点溯源，找到第一个平衡因子失衡的根结点。</li><li>这个结点以及他的子树们组成最小不平衡子树</li></ol>				
Σ 一般导致最小不平衡子树的方式有哪四种？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	<ol><li>LL 左孩子的左子树插入</li><li>RR  右孩子的右子树插入</li><li>LR 左孩子的右子树插入</li><li>RL 右孩子的左子树插入</li></ol>				
Σ LL的最小不平衡子树的调整策略是什么？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	"右单旋转<cr><img src=""https://mubu.com/document_image/850947f6-cca2-4eca-88ef-2dd89fe50fe4-11521829.jpg"">"				
Σ RR的最小不平衡子树的调整策略是什么？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	"左单旋转<cr><img src=""https://mubu.com/document_image/dcad8a78-81a5-4478-9921-0369623f8d05-11521829.jpg"">"				
Σ LR的最小不平衡子树的调整策略是什么？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	"<ol><li>先左旋，再右旋<cr><img src=""https://mubu.com/document_image/ee80bb67-b842-46a2-a407-3e1825f6d9e6-11521829.jpg""></li><li><cr><img src=""https://mubu.com/document_image/2f8e5072-0c26-4c9d-a12f-29c657df67fa-11521829.jpg""></li></ol>"				
Σ RL的最小不平衡子树的调整策略是什么？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	"<ol><li>先右旋，后左旋<cr><img src=""https://mubu.com/document_image/469b971c-13cd-4863-ab40-fe9275c7581c-11521829.jpg""></li><li><cr><img src=""https://mubu.com/document_image/ebc83875-3388-4521-8c5e-9b0ec7d6f758-11521829.jpg""></li></ol>"				
Σ 为什么经过调整后，插入操作导致的不平衡会恢复？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	<ol><li>插入导致最小不平衡子树高度加1</li><li>而调整使高度重新恢复</li></ol>				
"Σ 调整一下<cr><img src=""https://mubu.com/document_image/c5a47971-ac95-4ec4-a165-bf8e81434063-11521829.jpg"" />"	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	"<cr><img src=""https://mubu.com/document_image/bc53db5a-b646-40a5-a1cc-55f1455d45dd-11521829.jpg"">"				
Σ 深度为h的平衡二叉树含有的最少结点数为多少？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	"<cr><img src=""https://mubu.com/document_image/69d3bf57-adc9-4416-ab51-7cf10ef8d0b7-11521829.jpg"">"				
Σ 含n个结点的平衡二叉树的最大深度是?平均查找长度是？	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	"<cr><img src=""https://mubu.com/document_image/2b11023c-9c13-4b33-98bc-2ea86c790d63-11521829.jpg"">"				
Σ 平衡二叉树	《 二叉搜索树与平衡二叉树 - 平衡二叉树》	"<ol><li>平衡二叉树的简写是什么？</li><li>平衡二叉树的定义是什么？</li><li>如何用参数判断一个树是不是平衡二叉树？</li><li>结点的平衡因子是什么？</li><li>平衡二叉树插入时会遇到什么情况？解决思路是什么？</li><li>我们研究的平衡二叉树一般是二叉搜索树吗？</li><li>什么是最小不平衡子树？</li><li>一般导致最小不平衡子树的方式有哪四种？</li><li>LL的最小不平衡子树的调整策略是什么？</li><li>RR的最小不平衡子树的调整策略是什么？</li><li>LR的最小不平衡子树的调整策略是什么？</li><li>RL的最小不平衡子树的调整策略是什么？</li><li>为什么经过调整后，插入操作导致的不平衡会恢复？</li><li>调整一下<cr><img src=""https://mubu.com/document_image/c5a47971-ac95-4ec4-a165-bf8e81434063-11521829.jpg""></li><li>深度为h的平衡二叉树含有的最少结点数为多少？</li><li>含n个结点的平衡二叉树的最大深度是?平均查找长度是？</li></ol>"				
RR代表什么意思？	因为在最小不平衡子树 右节点的右子树插入新结点导致不平衡					
所谓右旋左旋是相对什么而言？	右旋是针对当前子树，比如最小不平衡树的右子树的根结点右旋					
Σ 什么是B树？	《B树 - B树的定义》	多路平衡查找树				
Σ B树的阶是什么？	《B树 - B树的定义》	B树中所有结点孩子个数的最大值，一般用m表示				
Σ B树按结点类型分，分为哪些类型的结点？	《B树 - B树的定义》	<ol><li>根结点</li><li>终端结点</li><li>叶子结点</li><li>一般结点</li></ol>				
Σ B树的五大特性	《B树 - B树的定义》	"<ol><li><cr><img src=""https://mubu.com/document_image/4e5f823b-b511-4cc2-9eee-5066f93e8fca-11521829.jpg""></li><li>叶结点：出现在同一层次上，而且不带信息（可以视为折半查找判定树的查找失败结点，实际上这些结点不存在）</li></ol>"				
Σ B树非叶结点的存储结构是什么样的？	《B树 - B树的定义》	"n代表结点中关键字的个数，P代表指针，K代表关键字<cr><img src=""https://mubu.com/document_image/d6b155b1-3e63-4268-849b-9f48ac148bce-11521829.jpg"">"				
Σ B树哪些因素会导致要查很多层结点而效率低下？	《B树 - B树的定义》	<ol><li>每个结点的关键字太少，导致树变高</li><li>B树不够平衡，导致树变高</li></ol>				
Σ 如果每个结点内的关键字太少，导致树变高，要查更多层结点，效率低怎么办？	《B树 - B树的定义》	<ol><li>在m叉查找树中，除了根结点和叶子结点外，任何结点至少有m/2向上取整 个分叉，也就是至少含有m/2向上取整 -1个关键字</li><li>因为将一个区间用两个结点分开，会出现三个区间（分叉）</li></ol>				
Σ 如果树不够平衡，导致要查很多层结点，应该怎么办？	《B树 - B树的定义》	<ol><li>保证所有结点的所有子树高度相同！</li><li>比平衡树还要苛刻！二叉平衡树不要求完全相同，而是1的误差，因此树的插入会有很大不同</li></ol>				
Σ B树的高度包含叶子结点吗？	《B树 - B树的定义》	不包含				
Σ n个关键字的m阶B树，最小高度，最大高度是多少？	《B树 - B树的定义》	"<ol><li>最小高度策略：让每个结点尽可能满，m-1关键字，m分叉<cr><img src=""https://mubu.com/document_image/81232ecc-40ca-4790-91e6-9334dc0220b4-11521829.jpg""></li><li>最大高度策略：分叉尽可能少，根结点2个叉，其他结点只有m/2向上取整个分叉<cr><img src=""https://mubu.com/document_image/c48401e4-8f61-4bf9-a280-c388585f8cf9-11521829.jpg""></li></ol>"				
Σ n个关键字的B树，有多少个叶子结点?	《B树 - B树的定义》	n+1，也就是R区间有n个分割点，分成了n+1个区间				
Σ h层的m阶B树至少包含多少关键字总数？	《B树 - B树的定义》	"k=m/2向上取整<cr><img src=""https://mubu.com/document_image/08a5fc3a-5b0b-4439-8c2c-51cab99ac4d0-11521829.jpg"">"				
Σ B树的定义	《B树 - B树的定义》	<ol><li>什么是B树？</li><li>B树的阶是什么？</li><li>B树按结点类型分，分为哪些类型的结点？</li><li>B树的五大特性</li><li>B树非叶结点的存储结构是什么样的？</li><li>B树哪些因素会导致要查很多层结点而效率低下？</li><li>如果每个结点内的关键字太少，导致树变高，要查更多层结点，效率低怎么办？</li><li>如果树不够平衡，导致要查很多层结点，应该怎么办？</li><li>B树的高度包含叶子结点吗？</li><li>n个关键字的m阶B树，最小高度，最大高度是多少？</li><li>n个关键字的B树，有多少个叶子结点?</li><li>h层的m阶B树至少包含多少关键字总数？</li></ol>				
"Σ 构造一下这个的折半查找判定树<cr><img src=""https://mubu.com/document_image/0b239efb-66ef-4492-9379-ada600d58b68-11521829.jpg"" />"	《杂 - 1》	"<cr><img src=""https://mubu.com/document_image/971ce75e-9ce6-4c74-8cac-441b6368809b-11521829.jpg""><cr><img src=""https://mubu.com/document_image/cd201e54-0683-4c68-a39c-f135bb704585-11521829.jpg""><cr><img src=""https://mubu.com/document_image/a06c0fcf-c17a-4c78-b3b4-4305948b361c-11521829.jpg"">"				
Σ 有序和无序顺序表的顺序查找，每个元素的被查找概率都是相同的，则两种表的成功查找的平均时间谁更大	《杂 - 1》	<ol><li>相同！查找成功的比较次数只与位置有关，与有序无关</li><li>但是失败查找就不知道了</li></ol>				
连通图中含有n个顶点，则含有n个顶点，n-1条边的子图一定是G的生成树吗？	不一定，但如果想是G的生成树则至少有n-1条边，比如花瓣形。如果是n-1条边，也可能存在环					
简单路径是关键路径吗？	不是，最短路径一定是简单路径					
Floyd算法的pathk-1是不是pathk的子集？	不一定，可能k的最短路径前置结点被更改为不是k-1					
拓扑排序算法中暂存入度为0的顶点，可以使用哪种数据结构？	栈和队列都可以！没有讲究！从哪个入度为0的顶点开始都可以！					
一个有向图的顶点不能排成一个拓扑序列，该图一定有含有顶点数量&gt;1的强连通分量吗？	一定！拓扑序列需要有向无环，既然有向，那必定无环！强连通分量是任意两顶点之间都存在相互路径，也就是有环！					
有向图具有 有序 的拓扑排序序列，则邻接矩阵必定为三角矩阵吗？还是一般矩阵？	必定为三角矩阵！有序使小编号的结点一定在前，一定是小编号指向大编号，也就是三角矩阵！<cr>如果不有序则为一般矩阵					
带权图的最小生成树，某条边的权值会不会超过未选边的权值？	可能！因为最小生成树由P/K算法生成，为了保证总权最小，可能存在该种情况					
有向无环图的拓扑序列唯一，可以确定该图吗？反过来呢？	都不可以确定唯一！唯一序列可能有不同图，比如直线图和一些弯弯绕的多出无用边的图。<cr>唯一图可能有多个拓扑序列					
一个时间段 最迟发生时间是该事件为尾的弧的活动的最迟开始时间 与 该活动持续时间的差吗？	不是。<cr>某结点有多个后继结点，则比较该结点的最迟发生时间，选取最小的（因为要保证关键路径）					
如果逐点插入构造二叉排序树，而且插入关键字有序，会对二叉排序树的深度造成什么影响？	深度最大！因为每层只有一个结点！					
Σ 什么是散列表？或者说散列表的特点是什么？	《散列查找 - 散列查找的基本方法与总结》	<ol><li>散列表又称哈希表</li><li>特点是数据元素的 关键字 与其 存储地址 直接相关</li></ol>				
Σ 什么是散列表中的 同义词 与冲突？	《散列查找 - 散列查找的基本方法与总结》	<ol><li>多个不同的关键字通过散列函数映射到同一个值，他们互称同义词</li><li>而如果预存放的位置已经有了其他元素，这就叫冲突</li></ol>				
Σ 处理冲突的三种方法是什么？	《散列查找 - 散列查找的基本方法与总结》	<ol><li>拉链法</li><li>开放定址法</li><li>双散列法</li></ol>				
"Σ <cr><img src=""https://mubu.com/document_image/2be73bb4-1c83-47e6-b052-523ebcbb6c3e-11521829.jpg"" />"	《散列查找 - 散列查找的基本方法与总结》	"<cr><img src=""https://mubu.com/document_image/93d9f512-1ae1-43e1-a493-84bf8fa2d462-11521829.jpg"" />"				
Σ 散列查找的基本方法与总结	《散列查找 - 散列查找的基本方法与总结》	"<ol><li>什么是散列表？或者说散列表的特点是什么？</li><li>什么是散列表中的 同义词 与冲突？</li><li>处理冲突的三种方法是什么？</li><li>堆积现象会影响储存效率吗？会影响装填因子吗？</li><li>散列表的查找取决于哪三个因素？</li><li>散列查找的平均查找长度依赖于什么？</li><li>慎用！不一定正确，因为ASL除了α外，聚集的程度也会影响ASL<cr><img src=""https://mubu.com/document_image/2be73bb4-1c83-47e6-b052-523ebcbb6c3e-11521829.jpg"" /></li></ol>"				
Σ 拉链法的思路是什么？如何优化？	《散列查找 - 拉链法》	<ol><li>把所有同义词存储在同一个链表中</li><li>可以在散列结束后，将链表优化为有序链表从而方便查找</li></ol>				
Σ 常见的四种散列函数（从选取关键字 到导出散列地址）是什么？	《散列查找 - 拉链法》	<ol><li>除留余数法</li><li>折叠法</li><li>数字分析法</li><li>平方取余法</li></ol>				
Σ 在拉链查找中，如果查找某个元素而这个元素在散列表中的地址是空的，也就是查找失败，则他的查找长度是多少？	《散列查找 - 拉链法》	<ol><li>0</li><li>因为查找长度指对比关键字的次数！这里没有任何对比关键字！因为本身就是空指针</li></ol>				
Σ 拉链查找的ASL成功的计算方法	《散列查找 - 拉链法》	"<cr><img src=""https://mubu.com/document_image/dc63318f-d44e-48a0-89fa-1f98dc0caf06-11521829.jpg"">"				
Σ 拉链查找ASL失败的计算方法	《散列查找 - 拉链法》	"假设查找失败的关键字，在每一个散列表空位处的发生概率都相同，则<cr><img src=""https://mubu.com/document_image/7ed0f637-8cb3-4779-b54a-bb043000fec5-11521829.jpg"" />"				
Σ 什么是散列表的装填因子？	《散列查找 - 拉链法》	<ol><li>表中记录数/散列表长度</li><li>也就是拉链查找ASL失败的数值</li><li>代表着散列表装的到底有多满</li></ol>				
Σ 散列表查找的最理想情况的时间复杂度是多少？	《散列查找 - 拉链法》	O（1）				
Σ 除留余数法的思路是什么？	《散列查找 - 拉链法》	取关键字与 某一个指定数字p 的余数作为该关键字在散列表中储存位置的下标				
Σ 除留余数法的取p规则是什么？	《散列查找 - 拉链法》	"<ol><li>设散列表表长为m，取一个不大于m但最接近或等于m的质数p</li><li>一定要强调 质数 最接近</li><li>是为了让不同关键字的冲突尽可能的少，分布尽可能均匀</li><li><cr><img src=""https://mubu.com/document_image/1a70c570-d396-4e80-b091-4b86c87e675e-11521829.jpg"" /></li></ol>"				
Σ 1是质数吗？	《散列查找 - 拉链法》	不是				
Σ 什么是数字分析法？	《散列查找 - 拉链法》	<ol><li>选取数码分布较为均匀的若干位作为关键字</li><li>比如将手机号中变化最多的几位作为关键字</li></ol>				
Σ 什么是平方取中法？原理是什么？	《散列查找 - 拉链法》	<ol><li>将关键字的平方值的中间几位作为散列地址</li><li>因为一个数取平方，中间几位数字与关键字本身的每一位数字都有很密切的关系，使得散列值分布均匀</li></ol>				
Σ 什么时候可以考虑使用平方取中法？	《散列查找 - 拉链法》	当一个关键字数字乏善可陈，过于简单的时候				
Σ 散列函数为什么时间复杂度低？原理是什么？	《散列查找 - 拉链法》	空间换时间！				
Σ 拉链法	《散列查找 - 拉链法》	<ol><li>拉链法的思路是什么？如何优化？</li><li>常见的四种散列函数（从选取关键字 到导出散列地址）是什么？（不只是拉链法）</li><li>在拉链查找中，如果查找某个元素而这个元素在散列表中的地址是空的，也就是查找失败，则他的查找长度是多少？</li><li>拉链查找的ASL成功的计算方法</li><li>拉链查找ASL失败的计算方法</li><li>什么是散列表的装填因子？</li><li>散列表查找的最理想情况的时间复杂度是多少？</li><li>除留余数法的思路是什么？</li><li>除留余数法的取p规则是什么？</li><li>1是质数吗？</li><li>什么是数字分析法？</li><li>什么是平方取中法？原理是什么？</li><li>什么时候可以考虑使用平方取中法？</li><li>散列函数为什么时间复杂度低？原理是什么？</li></ol>				
Σ 开放定址法相对于拉链法的最大不同是什么？	《散列查找 - 开放定址法》	<ol><li>遇到冲突的时候，拉链法选择形成链表，开放定址法选择在冲突位置附近寻找空位置进行存放</li><li>遇到冲突的查找，拉链法在当前位置直接遍历链表，开放定址法在周围遍历链表</li></ol>				
Σ 开放定址法的定义是什么？	《散列查找 - 开放定址法》	"<ol><li>可以存放新表项的<span class=""bold"">空闲地址</span>，可以向同义词表开放，又可以向非同义表项开放</li><li>根据递推公式，在某地址发生第i次冲突时，将表项储存在特定位置</li><li><cr><img src=""https://mubu.com/document_image/49c7d05a-88d7-4d55-9eb9-82fa0843c13b-11521829.jpg""></li></ol>"				
Σ 开放定址法的三个散列方法是什么？区别是什么	《散列查找 - 开放定址法》	<ol><li>线性探测法</li><li>平方探测法</li><li>伪随机序列法</li><li>区别在于增量序列不同</li></ol>				
Σ 什么是增量序列？	《散列查找 - 开放定址法》	增量序列就是当散列表冲突时，冲突表项相距原表项的偏移量				
Σ 什么是线性探测法？	《散列查找 - 开放定址法》	"就是如果已经被占位置了的话，依次往后进行查找，直到找到一个空位置存放<cr><img src=""https://mubu.com/document_image/0d5841fb-2e33-46b1-95fb-c426a544dd50-11521829.jpg"" />"				
Σ 哈希函数值域与冲突处理函数值域一定相同吗？	《散列查找 - 开放定址法》	"<ol><li>不一定相同，可能落在哈希函数值域外</li><li><cr><img src=""https://mubu.com/document_image/b6fa9e66-21bf-45dc-bc88-de7f99c11a90-11521829.jpg"" /></li></ol>"				
Σ 开放地址法的空位置的判断是否算作一次比较？	《散列查找 - 开放定址法》	<ol><li>需要算作一次比较</li><li>但拉链法中的空指针的判断不能算作一次比较</li></ol>				
Σ 开放地址法如何删除某个结点？	《散列查找 - 开放定址法》	需要在将该结点值删除之后，进行一个标记，标记已经将其删除				
Σ 如果开放地址发删除结点后，不标记已经删除而仅仅只是清空他的值，会怎么样？	《散列查找 - 开放定址法》	可能在查找的时候，会让查找提前碰到空值而认为查找失败				
Σ 开放地址法用线性探测法查找时，如何判定查找失败？	《散列查找 - 开放定址法》	不断查看下一个单元是否为空，如果找到了指定元素就是查找成功，如果找到了空值就是查找失败				
Σ 开放地址法中线性探测法的缺陷是什么？	《散列查找 - 开放定址法》	<ol><li>如果频繁删除，会导致看起来很满，但是实际上只是被逻辑删除了太多东西，实际上空空荡荡的</li><li>很容易造成同义词和非同义词的堆积现象，影响查找效率</li></ol>				
Σ 二次探测法的增量序列是什么？	《散列查找 - 开放定址法》	"<cr><img src=""https://mubu.com/document_image/0675a14b-b2f6-4d05-af81-5d76287a4543-11521829.jpg"" />"				
Σ 二次探测法的散列表长度的限制是什么？	《散列查找 - 开放定址法》	m必须可以是可以表示为 4j+3 的 质数，才可以探测到所有位置				
Σ 二次探测法相比于线性探测法的优点是什么？	《散列查找 - 开放定址法》	不会造成同义词和非同义词的堆积现象				
Σ 什么是二次聚集？	《散列查找 - 开放定址法》	二次探测法仍然会产生一定程度的数据聚集，称之二次聚集				
Σ 开放定址法	《散列查找 - 开放定址法》	<ol><li>开放定址法相对于拉链法的最大不同是什么？</li><li>开放定址法发生聚集的根本原因是什么？</li><li>开放定址法的定义是什么？</li><li>开放定址法的三个解决散列冲突的方法是什么？区别是什么</li><li>什么是增量序列？</li><li>什么是线性探测法？</li><li>线性探测法ASL失败的计算，分子分母是什么？</li><li>哈希函数值域与冲突处理函数值域一定相同吗？</li><li>开放地址法的空位置的判断是否算作一次比较？</li><li>开放地址法如何删除某个结点？</li><li>如果开放地址发删除结点后，不标记已经删除而仅仅只是清空他的值，会怎么样？</li><li>开放地址法用线性探测法查找时，如何判定查找失败？</li><li>开放地址法中线性探测法的缺陷是什么？</li><li>二次探测法的增量序列是什么？</li><li>二次探测法的散列表长度的限制是什么？</li><li>二次探测法相比于线性探测法的优点是什么？</li><li>什么是二次聚集？</li></ol>				
Σ 什么是双散列法？	《散列查找 - 双散列法（再散列法）》	<ol><li>除了原始的散列函数外，多准备一个散列函数</li><li>但首选的散列函数冲突的时候，使用下一个散列函数计算新地址，直到不冲突为止</li></ol>				
Σ 散列查找	《散列查找》	<ol><li>散列查找的基本方法与总结</li><li>拉链法</li><li>开放定址法</li><li>双散列法（再散列法）</li></ol>				
Σ 堆积现象会影响储存效率吗？会影响装填因子吗？	《散列查找 - 散列查找的基本方法与总结》	<ol><li>都不会影响</li><li>只会影响平均查找长度</li></ol>				
Σ 散列表的查找取决于哪三个因素？	《散列查找 - 散列查找的基本方法与总结》	<ol><li>散列函数</li><li>处理冲突的方法</li><li>装填因子</li></ol>				
Σ 散列查找的平均查找长度依赖于什么？	《散列查找 - 散列查找的基本方法与总结》	α装填因子				
"Σ 慎用！不一定正确，因为ASL除了α外，聚集的程度也会影响ASL<cr><img src=""https://mubu.com/document_image/2be73bb4-1c83-47e6-b052-523ebcbb6c3e-11521829.jpg"" />"	《散列查找 - 散列查找的基本方法与总结》	"<cr><img src=""https://mubu.com/document_image/93d9f512-1ae1-43e1-a493-84bf8fa2d462-11521829.jpg"">"				
Σ 常见的四种散列函数（从选取关键字 到导出散列地址）是什么？（不只是拉链法）	《散列查找 - 拉链法》	<ol><li>除留余数法</li><li>折叠法</li><li>数字分析法</li><li>平方取余法</li></ol>				
Σ 开放定址法发生聚集的根本原因是什么使用不当？	《散列查找 - 开放定址法》	<ol><li>解决冲突的方法使用不当</li><li>不是散列函数选择不当！</li></ol>				
Σ 开放定址法的三个解决散列冲突的方法是什么？区别是什么	《散列查找 - 开放定址法》	<ol><li>线性探测法</li><li>平方探测法</li><li>伪随机序列法</li><li>区别在于增量序列不同</li></ol>				
Σ 线性探测法ASL失败的计算，分子分母是什么？	《散列查找 - 开放定址法》	<ol><li>分子是本来应该在该位置的值 被探测的次数之和</li><li>分母是散列函数值域，比如散列函数长11，但是是%7的，值域为7</li><li>9+8+7....看王道p303 T18</li></ol>				
散列函数中的折叠法是怎么操作的？<cr>	将关键字值从左往右分为若干位数相等的部分<cr>每部分的位数与散列地址的位数相同（最后一位可以少一些<cr>将这些部分相加，最后几位同散列地址位数的数字作为散列函数值					
Σ B树插入的思路	《B树 - B树的插入与删除》	<ol><li>搜索树中是否含有相同关键字的元素，存在则插入失败</li><li>如果不存在的话，搜索一定停止在失败结点处</li><li>此时将新元素插入在失败结点（叶结点）的上一层叶节点中</li><li>如果此时发生上溢 元素个数超过m-1，则一定发生结点分裂</li></ol>				
Σ B树插入，插入在哪里？	《B树 - B树的插入与删除》	叶结点				
Σ B树插入时的结点分裂思路是什么？	《B树 - B树的插入与删除》	<ol><li>将[m/2]向上取整作为拆分点，分为三部分</li><li>其中该点升阶到父结点，并衍生出两个指针，一个指向左边的结点，一个指向右边的结点</li><li>如果升阶后再溢出的话，继续升阶</li></ol>				
Σ 构建大根堆时如果B树分裂的结点上升到根结点的话，会有什么后果？	《B树 - B树的插入与删除》	分裂出新的根结点，导致B树长高一层				
Σ B树的删除，可以删除的结点有什么种类？	《B树 - B树的插入与删除》	分为叶结点与非叶结点				
Σ B树下溢出的处理方式有哪些？	《B树 - B树的插入与删除》	<ol><li>不影响左右溢出的时候，可以借</li><li>影响左右溢出的时候，考虑并</li></ol>				
Σ 如果B树删除的是叶结点，思路是什么？	《B树 - B树的插入与删除》	<ol><li>直接删除，然后是否下溢出进行处理</li><li>如果下溢出的话，可以直接考虑从左右借或者并</li></ol>				
Σ 借的思路是什么？	《B树 - B树的插入与删除》	<ol><li>优先借左，再考虑借右</li><li>如果左右不溢出的情况下可以开始借</li><li>如果是向左借的话，就是把左兄弟的最右边元素提到父节点上，然后把父节点元素下放到所需位置</li><li>如果是向有借的话，就是把右兄弟的最左边元素提到父节点上，然后把父节点元素下放到所需位置</li></ol>				
Σ 并的思路是什么？	《B树 - B树的插入与删除》	"<ol><li>将父节点与兄弟结点和自己合并</li><li>然后将父节点的父节点进行旋转，代替父节点的位置</li><li><cr><img src=""https://mubu.com/document_image/f2a41a3f-8eb5-425a-9b81-0123e0be3e4e-11521829.jpg""></li></ol>"				
Σ 如果B树删除 并采用 并 的结点上。根结点元素被删除，而且该结点只包含一个元素，且无法从右结点旋转多余的结点过来，会有什么后果？	《B树 - B树的插入与删除》	<ol><li>B树变矮一层</li><li>根结点变成不包含任何元素的空节点</li></ol>				
Σ B树的插入与删除	《B树 - B树的插入与删除》	<ol><li>B树插入的思路</li><li>B树插入，插入在哪里？</li><li>B树插入时的结点分裂思路是什么？</li><li>如果B树分裂的结点上升到根结点的话，会有什么后果？</li><li>B树的删除，可以删除的结点有什么种类？</li><li>B树下溢出的处理方式有哪些？</li><li>如果B树删除的是叶结点，思路是什么？</li><li>借的思路是什么？</li><li>并的思路是什么？</li><li>如果B树删除 并采用 并 的结点上。根结点元素被删除，而且该结点只包含一个元素，且无法从右结点旋转多余的结点过来，会有什么后果？</li></ol>				
B树插入一般用于什么场景？	硬盘储存插入的场景					
Σ 什么是排序算法的稳定性？	《数据结构 第八章 排序基础概念与插排 - 排序的基础概念》	<ol><li>对于两个不同位置但重复的关键字，排序后保证相对位置不变</li><li>这就叫稳定性</li></ol>				
Σ 外部排序与内部排序的区别是什么？需要考虑什么？	《数据结构 第八章 排序基础概念与插排 - 排序的基础概念》	<ol><li>内存的运行速率很高，所有元素存放在内存中，主要考虑如何降低时空复杂度</li><li>外部排序是在外部文件读写，元素无法全部同时存储在内存中，要经常在外内存间移动，需要关注如何降低读写磁盘的次数</li></ol>				
Σ 插入排序的基本思路是什么？	《数据结构 第八章 排序基础概念与插排 - 插入排序》	<ol><li>每次将一个记录 按照关键字的大小插入到 前面已经排序好的子序列</li><li>每一次都不断根据关键字往前遍历比较，找到适合的位置</li></ol>				
Σ 直接插入排序稳定吗？	《数据结构 第八章 排序基础概念与插排 - 插入排序》	稳定				
Σ 哨兵的好处是什么？	《数据结构 第八章 排序基础概念与插排 - 插入排序》	不需要每次判断j&gt;=0				
Σ 插入排序的最好时间复杂度是多少？	《数据结构 第八章 排序基础概念与插排 - 插入排序》	<ol><li>O（n）</li><li>原本元素就是有序排放，每个关键字只需移动一次</li></ol>				
Σ 插入排序的最坏时间复杂度是多少？	《数据结构 第八章 排序基础概念与插排 - 插入排序》	<ol><li>O(n^2)</li><li>元素逆序存放</li></ol>				
Σ 插入排序的优化思路是什么？	《数据结构 第八章 排序基础概念与插排 - 插入排序》	<ol><li>因为已排序好的序列是有序顺序表</li><li>所以可以使用折半插入排序找到应该插入的位置，在移动元素</li></ol>				
Σ 折半插入排序的思路是什么？	《数据结构 第八章 排序基础概念与插排 - 插入排序》	<ol><li>将待排序元素放到哨兵位置，然后low=第一个位置，high=序列最后一个位置</li><li>不断查找直到low&gt;high，把[low,i-1]的元素全部右移，然后把哨兵A[0]放在low所指位置</li><li>当A[mid]=A[0]，也就是已经有重复元素，为了保证稳定性，需要low=mid+1</li></ol>				
Σ 折半插入排序与普通的折半查找的区别在于哪？	《数据结构 第八章 排序基础概念与插排 - 插入排序》	<ol><li>折半查找中找到所需元素就停止A[mid]=A[0]</li><li>折半插入排序为了保证稳定性，需要low=mid+1</li></ol>				
Σ 插入排序的时间复杂度主要消耗在哪里了？	《数据结构 第八章 排序基础概念与插排 - 插入排序》	关键字对比 与 移动元素				
Σ 插入排序的空间复杂度是多少？	《数据结构 第八章 排序基础概念与插排 - 插入排序》	<ol><li>O(1)</li><li>仅用了一个哨兵或者temp储存</li></ol>				
Σ 链表和折半插入排序的时间复杂度是多少？相比于普通的插入排序减少了吗？	《数据结构 第八章 排序基础概念与插排 - 插入排序》	<ol><li>都是统一的O(n^2)</li><li>没有减少，只是比较关键字的次数减少了，移动元素次数没有改变！</li></ol>				
Σ 插入排序	《数据结构 第八章 排序基础概念与插排 - 插入排序》	<ol><li>插入排序的基本思路是什么？</li><li>直接插入排序稳定吗？</li><li>哨兵的好处是什么？</li><li>插入排序的最好时间复杂度是多少？</li><li>插入排序的最坏时间复杂度是多少？</li><li>插入排序的优化思路是什么？</li><li>折半插入排序的思路是什么？</li><li>折半插入排序与普通的折半查找的区别在于哪？</li><li>插入排序的时间复杂度主要消耗在哪里了？</li><li>插入排序的空间复杂度是多少？</li><li>链表和折半插入排序的时间复杂度是多少？相比于普通的插入排序减少了吗？</li></ol>				
Σ 希尔排序的思路是什么？	《排序算法1 - 希尔排序》	"<ol><li>追求表中元素部分有序，然后逐步逼近全局有序</li><li> 将排序表按照一定增量d划分成特殊子表，对每个字标分别进行直接插入排序</li><li>逐步缩小增量d，重复上述过程，直到d=1达到全局有序</li><li><cr><img src=""https://mubu.com/document_image/63d3add0-764a-4e55-8bac-d85789833fb3-11521829.jpg""></li></ol>"				
Σ 希尔排序空间复杂度是多少？	《排序算法1 - 希尔排序》	1				
Σ 希尔排序适用于什么数据结构的表？	《排序算法1 - 希尔排序》	<ol><li>顺序表</li><li>不适用于链表！</li></ol>				
Σ 希尔排序稳定吗？	《排序算法1 - 希尔排序》	不稳定！				
"Σ 手动模拟一下希尔排序<cr><img src=""https://mubu.com/document_image/4b9c5288-9461-44ec-92c5-94beadf0ac74-11521829.jpg"" />"	《排序算法1 - 希尔排序》	没有答案				
Σ 希尔排序	《排序算法1 - 希尔排序》	"<ol><li>希尔排序的思路是什么？</li><li>希尔排序空间复杂度是多少？</li><li>希尔排序最坏最好时间复杂度是多少？</li><li>希尔排序适用于什么样的表？</li><li>希尔排序稳定吗？</li><li>手动模拟一下<cr><img src=""https://mubu.com/document_image/4b9c5288-9461-44ec-92c5-94beadf0ac74-11521829.jpg""></li></ol>"				
Σ 常见的交换排序有哪两种排序？	《排序算法1 - 冒泡排序》	冒泡排序与快速排序				
Σ 交换排序的思路是什么？	《排序算法1 - 冒泡排序》	根据序列中两个元素关键字的比较结果 对换两个记录在序列中的位置				
Σ 一趟冒泡排序的思路	《排序算法1 - 冒泡排序》	从前往后，或者从后往前两两比较相邻元素的值，如果逆序则交换，直到序列比较完毕				
Σ 冒泡排序什么时候停止？	《排序算法1 - 冒泡排序》	当经过一躺遍历后，没有经过任何一次交换，就可以停止了				
Σ 冒泡排序的空间复杂度是多少	《排序算法1 - 冒泡排序》	1				
Σ 冒泡排序是稳定的吗	《排序算法1 - 冒泡排序》	是稳定的				
Σ 冒泡排序的时间复杂度，在什么时候最好？为多少？	《排序算法1 - 冒泡排序》	在有序的情况下最好，为n				
Σ 冒泡排序的时间复杂度，在什么时候最坏？为多少？	《排序算法1 - 冒泡排序》	在逆序的情况下最坏，为n^2				
Σ 希尔排序和冒泡排序的适用范围有什么不同？	《排序算法1 - 冒泡排序》	希尔排序仅适用于顺序表，而冒泡排序可以用于顺序表与链表				
Σ 冒泡排序	《排序算法1 - 冒泡排序》	<ol><li>常见的交换排序有哪两种排序？</li><li>交换排序的思路是什么？</li><li>一趟冒泡排序的思路</li><li>冒泡排序什么时候停止？</li><li>冒泡排序的空间复杂度是多少</li><li>冒牌排序是稳定的吗</li><li>冒泡排序的时间复杂度，在什么时候最好？为多少？</li><li>冒泡排序的时间复杂度，在什么时候最坏？为多少？</li><li>希尔排序和冒泡排序的适用范围有什么不同？</li></ol>				
Σ 快速排序的思路是什么？	《排序算法1 - 快速排序》	<ol><li>快速排序是设置一个枢轴元素（常用首元素）</li><li>通过一趟排序将排序表划分为小于枢轴元素和大于等于枢轴元素的两部分</li><li>然后递归对两边的子表重复过程</li><li>直到每部分只有一个元素或者为空为止</li></ol>				
Σ 快速排序需要用到什么指针？	《排序算法1 - 快速排序》	low和high				
Σ 快速排序具体划分子表流程	《排序算法1 - 快速排序》	<ol><li><span>在保证low<high的基础上，while循环让high不断左移，找到小于pivot的元素放到low的位置</span></li><li>然后同样的思路让low不断右移，找到大于pivot的元素放到high的位置</li><li>直到low=high也就是遍历一趟完成，此时在low中放入pivot并返回指针位置</li><li>最后循环递归划分左右子表</li></ol>				
Σ 快速排序的空间复杂度是什么？	《排序算法1 - 快速排序》	"<ol><li>是递归调用划分左右子表的 递归层数</li><li>也就是将n个元素划分为二叉树，二叉树的层数就是递归调用层数</li><li>最小调用次数就是 log2 n向下取整+1</li><li>最大就是n</li><li><cr><img src=""https://mubu.com/document_image/55afd576-ee62-4987-8a08-ae8319b03f86-11521829.jpg""></li></ol>"				
Σ 快速排序的时间复杂度是什么？	《排序算法1 - 快速排序》	"<ol><li>时间复杂度就是每次调用都要遍历一次元素，所以是空间复杂度乘以n</li><li><cr><img src=""https://mubu.com/document_image/d26c56fd-8088-4434-94f8-7f690192452f-11521829.jpg""></li></ol>"				
Σ 快速排序什么时候算法效率最高？什么时候最坏	《排序算法1 - 快速排序》	<ol><li>当枢轴将序列划分为均匀两部分，也就是平衡二叉树，此时递归深度最小，效率最高</li><li>当原本有序的时候，最坏，会形成一个单支二叉树，此时深度最深</li><li>快速排序的算法效率与递归深度息息相关</li></ol>				
Σ 快速排序具有稳定性吗？	《排序算法1 - 快速排序》	不具有稳定性				
Σ 快速排序	《排序算法1 - 快速排序》	<ol><li>快速排序的思路是什么？</li><li>快速排序需要用到什么指针？</li><li>快速排序具体划分子表流程</li><li>快速排序的空间复杂度是什么？</li><li>快速排序的时间复杂度是什么？</li><li>快速排序什么时候算法效率最高？什么时候最坏</li><li>快速排序具有稳定性吗？</li></ol>				
Σ 简单选择排序的思路是什么？	《排序算法1 - 简单选择排序》	循环检查待排序元素，将最小元素加入有序子序列				
Σ 简单选择排序与插入排序的区别是什么？	《排序算法1 - 简单选择排序》	<ol><li>都是形成有序子序列，插入排序是将最近的元素在有序子序列中循环查找找到合适的位置，然后插入</li><li>而简单选择排序则是将循环查找未排序元素，找到最小的元素插入有序子序列</li><li>差别在于简单选择排序循环查找未排序元素，插入排序循环查找已排序元素</li></ol>				
Σ 简单选择排序的空间复杂度是多少？	《排序算法1 - 简单选择排序》	1				
Σ 简单选择排序的时间复杂度是多少？	《排序算法1 - 简单选择排序》	n^2				
Σ 简单选择排序稳定吗？	《排序算法1 - 简单选择排序》	不稳定				
Σ 简单选择排序的适用结构有哪些？	《排序算法1 - 简单选择排序》	顺序表与链表都可以，与直接插入排序相同				
Σ 简单选择排序需要进行多少趟处理？	《排序算法1 - 简单选择排序》	固定n-1				
Σ 简单选择排序	《排序算法1 - 简单选择排序》	<ol><li>简单选择排序的思路是什么？</li><li>简单选择排序与插入排序的区别是什么？</li><li>简单选择排序的空间复杂度是多少？</li><li>简单选择排序的时间复杂度是多少？</li><li>简单选择排序稳定吗？</li><li>简单选择排序的适用结构有哪些？</li><li>简单排序需要进行多少趟处理？</li></ol>				
Σ 归并排序的基本思路是什么？	《最后的排序 - Merge排序》	<ol><li>多个指针分别指向待排序数组的 首个元素，然后找到最小的元素加入新表中，然后被加入的一方的指针自加一</li><li>直到一个待排序数组排序完成后，剩下的数组的元素直接插到表尾</li><li>因为默认被排序的表都是有序表</li></ol>				
Σ n路归并挑出一个最小元素需要对比多少次？	《最后的排序 - Merge排序》	n-1次				
Σ 归并排序，如果遇到多路排序，一定要用多路排序吗？	《最后的排序 - Merge排序》	不需要，可以次用将初始序列划分为多个由两个元素组成的数组，然后迭代的两两进行二路排序				
Σ 二路归并的归并树，形态上就是一棵	《最后的排序 - Merge排序》	倒立的二叉树				
Σ n个元素进行二路归并，归并趟数是多少？	《最后的排序 - Merge排序》	<ol><li>就是二叉树的层数-1   因为四层数只需要归并三次</li><li>也就是log2 n向上取整</li></ol>				
Σ n个元素进行二路归并，每趟归并的时间复杂度是多少？总时间复杂度是多少？	《最后的排序 - Merge排序》	<ol><li>每趟是O(n)</li><li>一共试试O（nlog2 n）</li></ol>				
Σ n个元素进行二路归并，空间复杂度是多少？	《最后的排序 - Merge排序》	O（n），主要就是辅助数组B				
Σ 归并排序稳定吗	《最后的排序 - Merge排序》	稳定				
Σ 归并排序算法的具体步骤是什么？	《最后的排序 - Merge排序》	<ol><li>①若low&gt;high，则将序列分从中间 mid=(low+high)/2 分开</li><li>②对左半部分 [low， mid] 递归地进行归并排序</li><li>③对右半部分[mid+1， high] 递归地进行归并排序</li><li>④将左右两个有序子序列 Merge为一个</li></ol>				
Σ Merge排序	《最后的排序 - Merge排序》	<ol><li>归并排序的基本思路是什么？</li><li>n路归并挑出一个最小元素需要对比多少次？</li><li>归并排序，如果遇到多路排序，一定要用多路排序吗？</li><li>二路归并的归并树，形态上就是一棵</li><li>n个元素进行二路归并，归并趟数是多少？</li><li>n个元素进行二路归并，每趟归并的时间复杂度是多少？总时间复杂度是多少？</li><li>n个元素进行二路归并，空间复杂度是多少？</li><li>归并排序稳定吗</li><li>归并排序算法的具体步骤是什么？</li></ol>				
Σ 基数排序的思想是什么？	《最后的排序 - 基数排序》	<ol><li>把待排序序列的关键字 拆分为d项，然后将所有元素按照最小拆分项的大小递减排序插入，生成多个依据最小项值的不同 分开的多个链表</li><li>然后再将多个链表递减排序串成一个链表，重复迭代上一个操作，直到所有拆分项都被遍历，生成有序链表</li></ol>				
Σ 什么是基数？举例	《最后的排序 - 基数排序》	<ol><li>基数是r，被拆分项可以有r中情况</li><li>每一个被拆分项的取值范围就是[0,r-1]</li><li>比如拆分出十位项，r就是10，因为取值范围是0到9</li><li>拆分出月份，r就是12</li></ol>				
Σ 基数排序的空间复杂度是多少？	《最后的排序 - 基数排序》	"<ol><li>r，也就是O（r）</li><li>因为需要r个辅助队列</li><li><cr><img src=""https://mubu.com/document_image/f6d91dbb-aa12-43d3-bf0f-3e29f760c6f8-11521829.jpg""></li></ol>"				
Σ 基数排序的时间复杂度是多少？	《最后的排序 - 基数排序》	"<cr><img src=""https://mubu.com/document_image/f0d1b5da-c400-4cf6-a6de-3375b5bf333a-11521829.jpg"">"				
Σ 基数排序具有稳定性吗？	《最后的排序 - 基数排序》	具有稳定性				
Σ 基数排序擅长解决哪些问题？	《最后的排序 - 基数排序》	<ol><li>数据元素关键字方便拆分成d组，且d比较小</li><li>每组关键字取值范围小，也就是r比较小</li><li>数据元素个数n比较大</li><li>比如身份证和日期这样的很实用</li></ol>				
Σ 基数排序	《最后的排序 - 基数排序》	<ol><li>基数排序的思想是什么？</li><li>什么是基数？举例</li><li>基数排序的空间复杂度是多少？</li><li>基数排序的时间复杂度是多少？</li><li>基数排序具有稳定性吗？</li><li>基数排序擅长解决哪些问题？</li></ol>				
Σ 什么是堆？	《最后的排序 - 堆排序》	<ol><li>如果满足L(i)≥L(2i)=L(i)≥L(2i+1) (1≤i ≤n/2) ，也就是某一个元素比他的左右子树都要大 就是大根堆</li><li>如果根结点最小的话，则是小根堆</li></ol>				
Σ 构建大根堆时，如何处理非根非叶节点？	《最后的排序 - 堆排序》	检查当前结点是否满足大根堆的定义，如果不满足的话，将当前结点与最大的孩子互换				
Σ 如果在构建堆的时候，元素互换破坏了原有的堆性质，应该如何对敌》	《最后的排序 - 堆排序》	可以采用相同的方法继续往下一直调整，也就是将小元素不断下坠				
Σ 构建大根堆时，为什么要从第len/2个结点开始处理？	《最后的排序 - 堆排序》	<ol><li>因为大于n/2一定都是叶子结点</li><li>小于n/2一定都是分支结点/根结点</li></ol>				
Σ 构建大根堆时的整体思路是什么？	《最后的排序 - 堆排序》	<ol><li>将所有的分支节点倒序遍历 检查是否符合大根堆特点修改直到遍历至根结点</li><li>根结点进行逐步下坠，直到构建完整的大根堆</li></ol>				
Σ 大根堆排序为递增序列的思路是什么？	《最后的排序 - 堆排序》	<ol><li>构建大根堆</li><li>将堆顶元素与待排序序列最后一个元素进行交换</li><li>将排序序列后的 最后一个元素排除在大根堆之外</li><li>然后重新小元素下坠使大根堆恢复大根堆状态</li><li>不断重复直到全部有序得到递增序列</li><li>小根堆得到递减序列</li></ol>				
Σ 每个结点每下坠一层，最多需要对比多少次关键字？	《最后的排序 - 堆排序》	<ol><li>1/2次</li><li>当只有一个孩子的时候对比1次</li></ol>				
Σ 若树高为h，某结点在第i层，则将这个结点向下调整最多只需要“下坠” 多少 层，关键字对比次数不超过多少	《最后的排序 - 堆排序》	<ol><li> h-i 层</li><li>关键字对比次数不超过 2(h-i)</li></ol>				
Σ 哪些层数的结点可能需要下坠操作？	《最后的排序 - 堆排序》	<ol><li>第一层至倒数第二层</li><li>因为倒数第一层是叶子结点，没有可以坠的地方了</li></ol>				
Σ 建堆的过程中关键字对比的次数大概有多少？时间复杂度呢？	《最后的排序 - 堆排序》	<ol><li>关键字对比不超过4n</li><li>建堆时间复杂度为n</li></ol>				
下坠的过程中时间复杂度是多少？	《最后的排序 - 堆排序 - 下坠的过程中时间复杂度是多少？》	每一趟不超过O（h）也就是O（log2 n）<cr>一共n-1趟，也就是O（nlog2 n）				
Σ 下坠的过程中时间复杂度是多少？	《最后的排序 - 堆排序》	每一趟不超过O（h）也就是O（log2 n）				
Σ 堆排序过程时间复杂度怎么算？	《最后的排序 - 堆排序》	"<cr><img src=""https://mubu.com/document_image/7b041e48-c1c9-49bf-bb71-409f56249bc7-11521829.jpg"">"				
Σ 堆排序过程空间复杂度怎么算？	《最后的排序 - 堆排序》	1				
Σ 如果建堆的时候，左右孩子一样大，如何交换？	《最后的排序 - 堆排序》	优先和左孩子交换				
Σ 堆排序稳定吗？	《最后的排序 - 堆排序》	不稳定				
Σ 堆排序如何插入新元素？	《最后的排序 - 堆排序》	对比后不断上升直到上升不动				
Σ 堆排序如何删除分支/叶子元素？	《最后的排序 - 堆排序》	<ol><li>叶子元素删了就删了</li><li>分支元素删了后用堆底的叶子元素替代，然后不断下坠</li></ol>				
Σ 每次上升需要对比多少次关键字？	《最后的排序 - 堆排序》	1次				
Σ 堆排序	《最后的排序 - 堆排序》	<ol><li>什么是堆？</li><li>构建大根堆时，如何处理非根非叶节点？</li><li>如果在构建堆的时候，元素互换破坏了原有的堆性质，应该如何对敌》</li><li>构建大根堆时，为什么要从第len/2个结点开始处理？</li><li>构建大根堆时的整体思路是什么？</li><li>大根堆排序为递增序列的思路是什么？</li><li>每个结点每下坠一层，最多需要对比多少次关键字？</li><li>若树高为h，某结点在第i层，则将这个结点向下调整最多只需要“下坠” 多少 层，关键字对比次数不超过多少</li><li>哪些层数的结点可能需要下坠操作？</li><li>建堆的过程中关键字对比的次数大概有多少？时间复杂度呢？</li><li>下坠的过程中时间复杂度是多少？</li><li>堆排序过程时间复杂度怎么算？</li><li>堆排序过程空间复杂度怎么算？</li><li>如果建堆的时候，左右孩子一样大，如何交换？</li><li>堆排序稳定吗？</li><li>堆排序如何插入新元素？</li><li>堆排序如何删除分支/叶子元素？</li><li>每次上升需要对比多少次关键字？</li></ol>				
Σ 最后的排序	《最后的排序》	<ol><li>Merge排序</li><li>基数排序</li><li>堆排序</li></ol>				
B树和平衡二叉树相比，在平衡性上有什么不同	B树每个结点的所有子树都高度相同，但平衡允许平衡因子为0/1/-1					
带不带头结点的链队列在判空方面一样吗？	严格来说一样。因为带头结点的话，两个指针都指向头结点。不带头结点的话，两个指针都指向空。					
"<span style=""color: rgb(29, 29, 31); background-color: rgb(255, 255, 255);"">如果用链结构表示队列或者栈，为什么需要定义两个typedef数据结构？</span>"	<ul><li>因为一个数据结构表示队列的结点和next，构成一个完整的链表。<cr></li><li>需要另一个数据结构表示front和rear或者top进而真正代表了一种数据结构<cr></li>&nbsp;</ul>					
对n个不同数据元素进行 直接插入排序，最少/最多需要比较多少次？	最少需要n-1次，也就是本来就有序。<cr>最多需要n(n-1)/2次。<cr>需要注意题目不考虑对哨兵的比较<cr>因为南邮不比较！					
待排序元素基本有序的情况下，什么排序算法最好？	直接插入排序最好！					
哪些排序可以每趟排序都能确定一个元素的最终位置？	冒泡排序、简单选择排序、堆排序、快速排序<cr><cr>冒泡排序是每次将一个最值元素冒泡到终点的位置<cr>简单选择排序可以但简单插入不可以，简单选择是逐步完善最终序列<cr>堆排序可以，构建根堆过程并不算一趟！<cr>前面三个都是确定一个最值的位置<cr>但是选择排序是确定一个枢轴元素位置					
判断某个半成品序列是哪种排序，思路是怎么样的？	首先判断是不是有最值已经排好，排好的话从冒泡 简选 堆和快排找<cr>然后寻找每个排序的特征					
希尔排序的组内排序采用的是什么算法？	直接插入排序<cr>思路记住！搭配代码！					
哪些排序基于比较？	除了基数排序（基于分配）和外部排序的排序章节的都是基于比较					
稳定性是衡量算法优劣的一个指标吗？	不是，仅仅是描述算法性质					
内部排序可以分为哪五类？	插入排序、交换排序、选择排序、归并排序、基数排序&nbsp; &nbsp;交叉选龟鸡					
"Σ <cr><img src=""https://mubu.com/document_image/f2d1aefa-b085-4619-90df-2150c2b58807-11521829.jpg"" />"	《1 - 杂谈》	"<cr><img src=""https://mubu.com/document_image/8bc202e7-d187-4075-b93f-223866d5a24a-11521829.jpg"">"				
"Σ <cr><img src=""https://mubu.com/document_image/33f2d5b7-8399-42b4-9409-281d99c9ea65-11521829.jpg"" />"	《1 - 杂谈》	"<cr><img src=""https://mubu.com/document_image/4c145c50-bf7c-4a48-8721-ae343a1bea55-11521829.jpg"">"				
"Σ <cr><img src=""https://mubu.com/document_image/757541d3-3b20-4590-931f-ceb6ebe56bec-11521829.jpg"" />"	《1 - 杂谈》	"<cr><img src=""https://mubu.com/document_image/9c48c0ab-85ee-460c-bd5a-ec41d7b490db-11521829.jpg"">"				
如果n较小，且本身信息量较大，可以采用？	简单选择排序					
如果n较小，本身信息量较少，可以采用什么排序？	直接插入排序					
如果已经按照关键字部分有序，可以使用哪种排序？	直接插入与冒泡排序					
如果n较大，可以采用什么排序？	快排（随机分布时时间最短、堆排序（辅助空间最少为1、归并排序（稳定<cr><cr>快排适 合所有排序<cr>堆排序 非常适合只求最小或者最多前多少项的数据<cr>基数排序 可以分解时可以采用<cr>归并排序 可以用在外部排序					
证明 当文件的n个关键字随机分布，任何基于比较的排序算法至少需要多少时间？<cr>至少需要多少次关键字的两两比较？	O(nlog2 n)<cr>因为每次比较两个关键字大小后，尽可能出现两种转移，所以可以用二叉树描述判定过程<cr>二叉树最少层数为log2 n，所以至少需要O(nlog2 n)<cr><cr>log2 (n!) 上取整<cr>假设排序过程需要t次比较，一共有2^t种情况，而n个记录一共有n!种不同排列。2^t&gt;n!<cr>得出t为log2 (n!) 上取整					
当n特别大，且关键字可以分解时，可以用？	基数排序					
如果记录本身信息量巨大，可以如何避免大量时间移动记录？	可以使用链表作为存储结构，方便插入删除					
冒泡排序与直接插入排序在前几躺遍历中，交换元素次数的区别是什么？	直接插入元素前几次交换 如果不考虑哨兵的话，就是1.2.3次交换，形成局部有序序列<cr>冒泡排序前几次交换，第i躺排序需要进行n-i次比较，形成全局有序序列					
冒泡排序的有序子序列与直接插入排序的有序子序列，谁是全局有序？谁是部分有序？	冒泡是全局有序，直接插入排序是部分有序					
递归方式对顺序表快速排序，递归次数与初始序列的排列次序有关吗？与每次划分后得到的分区处理顺序有关吗？	都无关					
什么叫做趟？	对为确定最终位置的所有元素进行一遍处理称为 趟					
如果想得到前k个元素的顺序排列可以采用的排序算法有哪些？	冒泡排序、堆排序、简单选择排序					
如果是如果关键字极多，想选出前100个最大值，最合适的算法是什么？	堆排序，只需遍历一遍这个数据集，然后进行简短的堆维护就可以得到最小数据集					
如果每个元素有两个数据项，要求第一个数据项k1小的在前，k1相同时k2小的在前，如何设计这种排序方法？	类似于基数排序的LSD（最低位优先）。类似基数排序中的数字例子<cr>分析题意，首先k1最优先项，则采用最低位优先，也就是先排序k2再排k1<cr>一直k1值相同，k2进行前后排序，也就是k1排布时具有稳定性<cr>先k2简单选择排序，在k1直接插入排序					
堆排序中，插入一个新元素的时间复杂度是多少？删除一个元素呢？	插入和删除都是log2 n 因为只需要进行基于树高次的比较就可以					
基于分治的算法有哪些？	归并排序与快速排序					
N个元素进行k路归并排序，需要排序多少趟？	log k N 向上取整					
空间复杂度排序 快排 归排&nbsp; 其他排	归排固定为n 快排为log2 n --- n&nbsp; 其他为1					
一般情况下 查找效率最低的数据结构是什么？	堆排序，因为堆排序并不具有搜索功能，只是大致排序，查找极其麻烦					
什么样的排序，排序趟数与初始序列有关	仅有交换排序 也就是冒泡与直选，其他都无关！					
直接插入排序的比较次数是多少？	最少n-1&nbsp; 最多n(n-1)/2 平均n^2&nbsp; / 4					
折半插入排序的比较次数是多少？	nlog2 n 固定！					
直接插入排序与折半插入排序的移动次数是多少？	最少是0，也就是不需要移动，最多n(n-1) /2 平均n^2 / 4					
直接插入排序 需要遍历多少趟？	固定n-1					
冒泡排序的比较次数是多少？	最少n-1 最多n(n-1)/2 平均n^2&nbsp;					
冒泡排序的移动次数是多少？	最少0，最多3n(n-1)/2 平均 n^2					
简单选择排序的比较次数是多少？	固定是 n(n-1）/2					
简单选择排序的移动次数是多少？	最少是0，最多是3（n-1） 平均是n					
冒泡排序的趟数是多少？	1-----(n-1)					
简单选择排序的趟数是多少？	固定n-1					
堆排序每次调整需要比较几次？	log2 n					
堆排序建立堆需要比较多少次？	4n					
堆排序完成需要移动多少次？	固定n-1					
2路归并需要比较多少次？	最少为N 最多为2N-1					
2路归并需要多少趟？	log2 n 向上取整					
二叉树中序遍历最后一个结点是什么结点？	从根开始沿着右子女指针走到底的结点					
二叉树中序遍历的最后一个结点与前序遍历最后一个结点的关系是什么？	中序遍历最后一个结点如果是叶结点，则与前序遍历最后一个结点重合。如果不是叶结点，则前序遍历的最后一个结点是该结点的左子树中					
如果二叉树两个结点m与n，m是n的祖先，什么遍历可以找到m到n的路径？	后序遍历					
在二叉树的先中后序列中，所有叶结点的先后顺序相同吗？	相同！					
给定先序序列，如何确定有多少棵满足该序列的树？	先序序列作为入栈序列，中序序列作为出栈序列有卡特兰数种<cr>而先序序列和中序序列可以确定一种固定的二叉树形态，所以一共有卡特兰数种不同的二叉树。<cr>仅可用于确定的先序序列！！！！					
如果一个非空二叉树先序后续序列相反，二叉树的特点是什么？	只有一个叶结点，或者说是一条直线走到底					
二叉树是一种什么结构？	逻辑结构					
线索二叉树是一种什么结构？	物理结构					
一棵线索二叉树最多可以有几个空链域？	2个，一个在最后结点（没有后继），一个在根结点（可能没有前驱）					
为什么线索化后，仍不能求后序线索二叉树的后序后继	某个有右子树的分支节点的后继 一定是他的父节点（左右根）<cr>而这个分支节点的右子树已经存在了，而且这个右子树不是他的后继结点。导致后序后继不能用线索计算					
如何找到后序线索二叉树的后继？	需要用三叉链表					
为什么相比于线索树，递归算法与非递归算法还需要栈的支持？	递归算法中用了隐含的函数调用栈结构，非递归算法中直接用了明确的栈结构。<cr>为了不使用栈结构，而且为了查找前驱后继更快，所以使用线索二叉树					
为什么后序线索树仍需要栈的支持？	后序线索树在特殊情况下无法找到直接后继，还是要返回最初的递归结构或者三叉链表					
先序序列与后序序列可以确定什么？	每一个结点的双亲祖先关系，比如先序中是XY，后序是YX，则X是Y的祖先结点，以此可以大致判断					
非空二叉树的先序序列与中序序列相同，所有非叶结点为什么一定要满足 只有右子树的条件？	NLR=LNR 则L=空					
森林转化为的二叉树中，设非终端结点有n个，则二叉树中右指针域为空的结点是什么结点？有多少？	所有非终端结点+最后一个孩子结点<cr>n+1<cr>所有树的右孩子都是他的兄弟结点，但是兄弟一定不是无穷无尽的，所以每个非终端结点的兄弟中一定存在最后一个兄弟（或者没有兄弟）的右链域为空<cr>而最后一个孩子，没有左右链域<cr>所以为n+1					
森林变换来的二叉树的叶结点有n个，则左孩子指针为空的结点有多少个？	n个<cr>左孩子指针为空也就是没有孩子，也就是叶结点。<cr>也就是除了最后一个孩子叶结点都无左孩子指针，非叶结点都无右孩子指针。而最后一个孩子叶结点左右孩子指针都没有！					
深度为h的平衡二叉树含有最少结点数时，平衡因子为多少？	1/-1.因为如果为0的话，则完全平衡需要额外的结点					
平衡二叉树一定是二叉搜索（排序）树吗	一定是					
平衡二叉树插入的最后元素一定是叶结点吗？	不一定！可能导致不平衡！二叉树调整后。该结点不一定是仍是叶结点					
证明题：如何证明 先序序列进栈的二叉树 出栈序列一定符合中序序列	1.以先序序列进栈，不管如何中途退栈，其退栈顺序一定符合 以该先序序列与某一中序序列唯一确定的二叉树的 中序序列。<cr>2.也就是先序序列作为先序序列，先序序列的任意退栈序列作为中序序列，一定可以确定一个二叉树<cr>3.因为退栈左结点后，一定要先退栈根结点才能通过退栈的根结点访问到右节点，所以退栈顺序一定是左根右，也就是中序退栈序列<cr>4.退栈的顺序可以改变，但是每一种退栈顺序都代表一种中序序列，也就是代表一种新树，仍符合3的退栈规则					
什么是线性结构？什么是非线性结构？	线性结构指一对一的关系，非线性结构指一对多或者多对多的关系，都是逻辑结构					
